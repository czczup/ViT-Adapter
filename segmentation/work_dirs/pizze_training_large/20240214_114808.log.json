{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2,3: NVIDIA L40\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.3.r11.3/compiler.29920130_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.9.0\nMMCV: 1.4.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+94ffa6b", "seed": 27009242, "exp_name": "pizze_training_large.py", "mmseg_version": "0.20.2+94ffa6b", "config": "num_things_classes = 6\nnum_stuff_classes = 0\nnum_classes = 6\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=\n    '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar',\n    backbone=dict(\n        type='BEiTAdapter',\n        patch_size=16,\n        embed_dim=1024,\n        depth=24,\n        num_heads=16,\n        mlp_ratio=4,\n        qkv_bias=True,\n        use_abs_pos_emb=False,\n        use_rel_pos_bias=True,\n        img_size=896,\n        init_values=1e-06,\n        drop_path_rate=0.3,\n        conv_inplane=64,\n        n_points=4,\n        deform_num_heads=16,\n        cffn_ratio=0.25,\n        deform_ratio=0.5,\n        with_cp=True,\n        interaction_indexes=[[0, 5], [6, 11], [12, 17], [18, 23]],\n        pretrained=\n        '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\n    ),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[1024, 1024, 1024, 1024],\n        feat_channels=1024,\n        out_channels=1024,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=6,\n        num_stuff_classes=0,\n        num_queries=200,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=1024,\n                        num_heads=32,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=1024,\n                        feedforward_channels=4096,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=512, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=512, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=1024,\n                    num_heads=32,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=1024,\n                    feedforward_channels=4096,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=4096,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(896, 896),\n            stride=(512, 512))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(896, 896),\n        stride=(512, 512)),\n    init_cfg=None)\ndataset_type = 'PizzeDataset'\ndata_root = 'data/dataset'\nimg_norm_cfg = dict(\n    mean=[71.203, 49.964, 36.472], std=[40.746, 30.747, 20.527], to_rgb=True)\ncrop_size = (896, 896)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='RandomFlip', prob=0),\n    dict(\n        type='Normalize',\n        mean=[71.203, 49.964, 36.472],\n        std=[40.746, 30.747, 20.527],\n        to_rgb=True),\n    dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='RandomFlip', prob=0),\n            dict(\n                type='Normalize',\n                mean=[71.203, 49.964, 36.472],\n                std=[40.746, 30.747, 20.527],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='RandomFlip', prob=0),\n            dict(\n                type='Normalize',\n                mean=[71.203, 49.964, 36.472],\n                std=[40.746, 30.747, 20.527],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n        ]),\n    val=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='RandomFlip', prob=0),\n                    dict(\n                        type='Normalize',\n                        mean=[71.203, 49.964, 36.472],\n                        std=[40.746, 30.747, 20.527],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='RandomFlip', prob=0),\n                    dict(\n                        type='Normalize',\n                        mean=[71.203, 49.964, 36.472],\n                        std=[40.746, 30.747, 20.527],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=10, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='LayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(num_layers=24, layer_decay_rate=0.9))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\nwork_dir = './work_dirs/pizze_training_large'\ngpu_ids = range(0, 4)\nauto_resume = False\ndevice = 'cuda'\nseed = 27009242\n", "CLASSES": ["bg", "Anchovy", "Olives", "Salami", "Red_Pepper", "Yellow_Pepper"], "PALETTE": [[255, 255, 255], [0, 0, 255], [0, 255, 255], [0, 255, 0], [255, 255, 0], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0, "memory": 35046, "data_time": 0.0356, "decode.loss_cls": 4.98833, "decode.loss_mask": 2.54487, "decode.loss_dice": 4.37633, "decode.d0.loss_cls": 4.10684, "decode.d0.loss_mask": 1.98047, "decode.d0.loss_dice": 4.09061, "decode.d1.loss_cls": 4.26584, "decode.d1.loss_mask": 2.33874, "decode.d1.loss_dice": 4.18855, "decode.d2.loss_cls": 4.04729, "decode.d2.loss_mask": 2.93596, "decode.d2.loss_dice": 4.30233, "decode.d3.loss_cls": 4.77615, "decode.d3.loss_mask": 4.30145, "decode.d3.loss_dice": 4.50412, "decode.d4.loss_cls": 3.82847, "decode.d4.loss_mask": 3.03617, "decode.d4.loss_dice": 4.2987, "decode.d5.loss_cls": 3.94349, "decode.d5.loss_mask": 3.64758, "decode.d5.loss_dice": 4.48117, "decode.d6.loss_cls": 4.64029, "decode.d6.loss_mask": 3.44257, "decode.d6.loss_dice": 4.49096, "decode.d7.loss_cls": 4.26152, "decode.d7.loss_mask": 3.35989, "decode.d7.loss_dice": 4.42178, "decode.d8.loss_cls": 3.41772, "decode.d8.loss_mask": 2.51563, "decode.d8.loss_dice": 4.48273, "loss": 116.01656, "time": 3.92749}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0, "memory": 35046, "data_time": 0.02213, "decode.loss_cls": 4.76249, "decode.loss_mask": 2.21246, "decode.loss_dice": 4.241, "decode.d0.loss_cls": 4.10257, "decode.d0.loss_mask": 1.8645, "decode.d0.loss_dice": 3.96517, "decode.d1.loss_cls": 4.26853, "decode.d1.loss_mask": 2.08904, "decode.d1.loss_dice": 4.04779, "decode.d2.loss_cls": 3.9739, "decode.d2.loss_mask": 2.50915, "decode.d2.loss_dice": 4.02322, "decode.d3.loss_cls": 4.63323, "decode.d3.loss_mask": 3.63879, "decode.d3.loss_dice": 4.43707, "decode.d4.loss_cls": 3.67905, "decode.d4.loss_mask": 2.54837, "decode.d4.loss_dice": 4.06585, "decode.d5.loss_cls": 3.66927, "decode.d5.loss_mask": 3.06235, "decode.d5.loss_dice": 4.30093, "decode.d6.loss_cls": 4.45003, "decode.d6.loss_mask": 2.68547, "decode.d6.loss_dice": 4.49253, "decode.d7.loss_cls": 4.00405, "decode.d7.loss_mask": 2.75702, "decode.d7.loss_dice": 4.27108, "decode.d8.loss_cls": 3.10529, "decode.d8.loss_mask": 1.90027, "decode.d8.loss_dice": 4.3836, "loss": 108.14406, "time": 3.56544}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.0, "memory": 35046, "data_time": 0.02216, "decode.loss_cls": 4.07682, "decode.loss_mask": 2.33456, "decode.loss_dice": 4.15244, "decode.d0.loss_cls": 4.07694, "decode.d0.loss_mask": 1.85124, "decode.d0.loss_dice": 3.84022, "decode.d1.loss_cls": 4.09802, "decode.d1.loss_mask": 1.84585, "decode.d1.loss_dice": 3.91275, "decode.d2.loss_cls": 3.74031, "decode.d2.loss_mask": 2.16146, "decode.d2.loss_dice": 3.83777, "decode.d3.loss_cls": 4.22927, "decode.d3.loss_mask": 2.9664, "decode.d3.loss_dice": 4.01157, "decode.d4.loss_cls": 3.37198, "decode.d4.loss_mask": 2.23323, "decode.d4.loss_dice": 3.82194, "decode.d5.loss_cls": 3.22634, "decode.d5.loss_mask": 2.49931, "decode.d5.loss_dice": 3.915, "decode.d6.loss_cls": 4.07204, "decode.d6.loss_mask": 2.18991, "decode.d6.loss_dice": 4.32058, "decode.d7.loss_cls": 3.57556, "decode.d7.loss_mask": 2.29214, "decode.d7.loss_dice": 4.03754, "decode.d8.loss_cls": 2.7051, "decode.d8.loss_mask": 2.06993, "decode.d8.loss_dice": 4.35993, "loss": 99.82616, "time": 3.57036}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.0, "memory": 35046, "data_time": 0.02956, "decode.loss_cls": 3.29292, "decode.loss_mask": 2.51605, "decode.loss_dice": 4.06779, "decode.d0.loss_cls": 4.05055, "decode.d0.loss_mask": 1.80069, "decode.d0.loss_dice": 3.76404, "decode.d1.loss_cls": 3.82403, "decode.d1.loss_mask": 1.79289, "decode.d1.loss_dice": 3.76874, "decode.d2.loss_cls": 3.30201, "decode.d2.loss_mask": 1.9762, "decode.d2.loss_dice": 3.7669, "decode.d3.loss_cls": 3.65186, "decode.d3.loss_mask": 2.77987, "decode.d3.loss_dice": 3.74588, "decode.d4.loss_cls": 2.85585, "decode.d4.loss_mask": 2.30486, "decode.d4.loss_dice": 3.86273, "decode.d5.loss_cls": 2.57679, "decode.d5.loss_mask": 2.437, "decode.d5.loss_dice": 3.85459, "decode.d6.loss_cls": 3.28599, "decode.d6.loss_mask": 2.17751, "decode.d6.loss_dice": 4.19893, "decode.d7.loss_cls": 2.91496, "decode.d7.loss_mask": 2.36844, "decode.d7.loss_dice": 3.9577, "decode.d8.loss_cls": 2.19588, "decode.d8.loss_mask": 2.41568, "decode.d8.loss_dice": 4.21815, "loss": 93.72548, "time": 4.89979}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 35046, "data_time": 0.02227, "decode.loss_cls": 2.33118, "decode.loss_mask": 2.8313, "decode.loss_dice": 3.84228, "decode.d0.loss_cls": 4.01278, "decode.d0.loss_mask": 1.79655, "decode.d0.loss_dice": 3.6849, "decode.d1.loss_cls": 3.45295, "decode.d1.loss_mask": 1.74803, "decode.d1.loss_dice": 3.6589, "decode.d2.loss_cls": 2.69106, "decode.d2.loss_mask": 1.94595, "decode.d2.loss_dice": 3.68834, "decode.d3.loss_cls": 2.86755, "decode.d3.loss_mask": 2.47225, "decode.d3.loss_dice": 3.67856, "decode.d4.loss_cls": 2.18271, "decode.d4.loss_mask": 2.33069, "decode.d4.loss_dice": 3.74954, "decode.d5.loss_cls": 1.95701, "decode.d5.loss_mask": 2.62238, "decode.d5.loss_dice": 3.80136, "decode.d6.loss_cls": 2.37438, "decode.d6.loss_mask": 2.50213, "decode.d6.loss_dice": 3.9529, "decode.d7.loss_cls": 2.13075, "decode.d7.loss_mask": 2.63398, "decode.d7.loss_dice": 3.82221, "decode.d8.loss_cls": 1.69294, "decode.d8.loss_mask": 2.68095, "decode.d8.loss_dice": 3.96416, "loss": 87.10068, "time": 3.56856}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.0, "memory": 35046, "data_time": 0.02194, "decode.loss_cls": 1.72818, "decode.loss_mask": 2.82531, "decode.loss_dice": 3.84078, "decode.d0.loss_cls": 3.99964, "decode.d0.loss_mask": 1.70365, "decode.d0.loss_dice": 3.63204, "decode.d1.loss_cls": 3.00236, "decode.d1.loss_mask": 1.60703, "decode.d1.loss_dice": 3.59573, "decode.d2.loss_cls": 2.08572, "decode.d2.loss_mask": 1.85524, "decode.d2.loss_dice": 3.65083, "decode.d3.loss_cls": 2.18355, "decode.d3.loss_mask": 2.17548, "decode.d3.loss_dice": 3.67529, "decode.d4.loss_cls": 1.681, "decode.d4.loss_mask": 2.27574, "decode.d4.loss_dice": 3.66073, "decode.d5.loss_cls": 1.56457, "decode.d5.loss_mask": 2.63944, "decode.d5.loss_dice": 3.74995, "decode.d6.loss_cls": 1.74162, "decode.d6.loss_mask": 2.60663, "decode.d6.loss_dice": 3.82827, "decode.d7.loss_cls": 1.61489, "decode.d7.loss_mask": 2.62641, "decode.d7.loss_dice": 3.81012, "decode.d8.loss_cls": 1.45427, "decode.d8.loss_mask": 2.76685, "decode.d8.loss_dice": 3.84927, "loss": 81.43057, "time": 3.57346}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.0, "memory": 35046, "data_time": 0.02133, "decode.loss_cls": 1.47357, "decode.loss_mask": 2.66425, "decode.loss_dice": 3.93523, "decode.d0.loss_cls": 3.98005, "decode.d0.loss_mask": 1.57265, "decode.d0.loss_dice": 3.61677, "decode.d1.loss_cls": 2.55307, "decode.d1.loss_mask": 1.4569, "decode.d1.loss_dice": 3.5923, "decode.d2.loss_cls": 1.62464, "decode.d2.loss_mask": 1.69617, "decode.d2.loss_dice": 3.61465, "decode.d3.loss_cls": 1.71914, "decode.d3.loss_mask": 1.96479, "decode.d3.loss_dice": 3.65896, "decode.d4.loss_cls": 1.43612, "decode.d4.loss_mask": 2.19573, "decode.d4.loss_dice": 3.62779, "decode.d5.loss_cls": 1.39176, "decode.d5.loss_mask": 2.49202, "decode.d5.loss_dice": 3.73439, "decode.d6.loss_cls": 1.44075, "decode.d6.loss_mask": 2.51205, "decode.d6.loss_dice": 3.8037, "decode.d7.loss_cls": 1.41384, "decode.d7.loss_mask": 2.51985, "decode.d7.loss_dice": 3.82454, "decode.d8.loss_cls": 1.38627, "decode.d8.loss_mask": 2.61022, "decode.d8.loss_dice": 3.89291, "loss": 77.40511, "time": 3.57565}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.0, "memory": 35046, "data_time": 0.02182, "decode.loss_cls": 1.4279, "decode.loss_mask": 2.63806, "decode.loss_dice": 3.81633, "decode.d0.loss_cls": 3.96442, "decode.d0.loss_mask": 1.57091, "decode.d0.loss_dice": 3.56259, "decode.d1.loss_cls": 2.16671, "decode.d1.loss_mask": 1.45655, "decode.d1.loss_dice": 3.56992, "decode.d2.loss_cls": 1.39783, "decode.d2.loss_mask": 1.63707, "decode.d2.loss_dice": 3.57186, "decode.d3.loss_cls": 1.50764, "decode.d3.loss_mask": 1.79887, "decode.d3.loss_dice": 3.59987, "decode.d4.loss_cls": 1.38393, "decode.d4.loss_mask": 2.04632, "decode.d4.loss_dice": 3.58836, "decode.d5.loss_cls": 1.38237, "decode.d5.loss_mask": 2.31597, "decode.d5.loss_dice": 3.74704, "decode.d6.loss_cls": 1.39082, "decode.d6.loss_mask": 2.4465, "decode.d6.loss_dice": 3.7617, "decode.d7.loss_cls": 1.39083, "decode.d7.loss_mask": 2.49468, "decode.d7.loss_dice": 3.77466, "decode.d8.loss_cls": 1.41103, "decode.d8.loss_mask": 2.5899, "decode.d8.loss_dice": 3.80002, "loss": 75.21065, "time": 3.57659}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.0, "memory": 35046, "data_time": 0.02131, "decode.loss_cls": 1.41961, "decode.loss_mask": 2.59231, "decode.loss_dice": 3.81851, "decode.d0.loss_cls": 3.94871, "decode.d0.loss_mask": 1.5219, "decode.d0.loss_dice": 3.53246, "decode.d1.loss_cls": 1.88188, "decode.d1.loss_mask": 1.41232, "decode.d1.loss_dice": 3.47102, "decode.d2.loss_cls": 1.33203, "decode.d2.loss_mask": 1.50676, "decode.d2.loss_dice": 3.49196, "decode.d3.loss_cls": 1.40547, "decode.d3.loss_mask": 1.59766, "decode.d3.loss_dice": 3.49034, "decode.d4.loss_cls": 1.36297, "decode.d4.loss_mask": 1.85943, "decode.d4.loss_dice": 3.52817, "decode.d5.loss_cls": 1.39048, "decode.d5.loss_mask": 2.14904, "decode.d5.loss_dice": 3.66939, "decode.d6.loss_cls": 1.38724, "decode.d6.loss_mask": 2.39664, "decode.d6.loss_dice": 3.76132, "decode.d7.loss_cls": 1.39237, "decode.d7.loss_mask": 2.44389, "decode.d7.loss_dice": 3.74461, "decode.d8.loss_cls": 1.4248, "decode.d8.loss_mask": 2.55773, "decode.d8.loss_dice": 3.77382, "loss": 73.26483, "time": 3.57907}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 35046, "data_time": 0.02195, "decode.loss_cls": 1.40846, "decode.loss_mask": 2.4896, "decode.loss_dice": 3.81278, "decode.d0.loss_cls": 3.92498, "decode.d0.loss_mask": 1.46857, "decode.d0.loss_dice": 3.45578, "decode.d1.loss_cls": 1.66887, "decode.d1.loss_mask": 1.34108, "decode.d1.loss_dice": 3.40461, "decode.d2.loss_cls": 1.31133, "decode.d2.loss_mask": 1.38968, "decode.d2.loss_dice": 3.41944, "decode.d3.loss_cls": 1.3616, "decode.d3.loss_mask": 1.43108, "decode.d3.loss_dice": 3.42875, "decode.d4.loss_cls": 1.36886, "decode.d4.loss_mask": 1.65824, "decode.d4.loss_dice": 3.43653, "decode.d5.loss_cls": 1.39804, "decode.d5.loss_mask": 1.93857, "decode.d5.loss_dice": 3.60181, "decode.d6.loss_cls": 1.3826, "decode.d6.loss_mask": 2.25393, "decode.d6.loss_dice": 3.72507, "decode.d7.loss_cls": 1.39053, "decode.d7.loss_mask": 2.2805, "decode.d7.loss_dice": 3.74683, "decode.d8.loss_cls": 1.41397, "decode.d8.loss_mask": 2.39205, "decode.d8.loss_dice": 3.78576, "loss": 71.08989, "time": 3.57896}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.0, "memory": 35046, "data_time": 0.02237, "decode.loss_cls": 1.40145, "decode.loss_mask": 2.4792, "decode.loss_dice": 3.74039, "decode.d0.loss_cls": 3.90498, "decode.d0.loss_mask": 1.46639, "decode.d0.loss_dice": 3.39516, "decode.d1.loss_cls": 1.52586, "decode.d1.loss_mask": 1.34633, "decode.d1.loss_dice": 3.32239, "decode.d2.loss_cls": 1.32746, "decode.d2.loss_mask": 1.34018, "decode.d2.loss_dice": 3.33004, "decode.d3.loss_cls": 1.32429, "decode.d3.loss_mask": 1.35858, "decode.d3.loss_dice": 3.36706, "decode.d4.loss_cls": 1.36811, "decode.d4.loss_mask": 1.52413, "decode.d4.loss_dice": 3.33818, "decode.d5.loss_cls": 1.38696, "decode.d5.loss_mask": 1.69229, "decode.d5.loss_dice": 3.48177, "decode.d6.loss_cls": 1.37279, "decode.d6.loss_mask": 2.05536, "decode.d6.loss_dice": 3.60386, "decode.d7.loss_cls": 1.38424, "decode.d7.loss_mask": 2.27388, "decode.d7.loss_dice": 3.64557, "decode.d8.loss_cls": 1.39498, "decode.d8.loss_mask": 2.41459, "decode.d8.loss_dice": 3.70994, "loss": 69.27643, "time": 3.58252}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.0, "memory": 35046, "data_time": 0.02215, "decode.loss_cls": 1.38647, "decode.loss_mask": 2.32329, "decode.loss_dice": 3.67277, "decode.d0.loss_cls": 3.90403, "decode.d0.loss_mask": 1.37485, "decode.d0.loss_dice": 3.3427, "decode.d1.loss_cls": 1.44141, "decode.d1.loss_mask": 1.33711, "decode.d1.loss_dice": 3.26627, "decode.d2.loss_cls": 1.34263, "decode.d2.loss_mask": 1.30568, "decode.d2.loss_dice": 3.2685, "decode.d3.loss_cls": 1.32307, "decode.d3.loss_mask": 1.28234, "decode.d3.loss_dice": 3.2956, "decode.d4.loss_cls": 1.35659, "decode.d4.loss_mask": 1.38719, "decode.d4.loss_dice": 3.28587, "decode.d5.loss_cls": 1.38236, "decode.d5.loss_mask": 1.48694, "decode.d5.loss_dice": 3.40183, "decode.d6.loss_cls": 1.36871, "decode.d6.loss_mask": 1.73378, "decode.d6.loss_dice": 3.47747, "decode.d7.loss_cls": 1.37378, "decode.d7.loss_mask": 1.92074, "decode.d7.loss_dice": 3.53671, "decode.d8.loss_cls": 1.37423, "decode.d8.loss_mask": 2.24832, "decode.d8.loss_dice": 3.62554, "loss": 66.8268, "time": 3.57952}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.0, "memory": 35046, "data_time": 0.02132, "decode.loss_cls": 1.35651, "decode.loss_mask": 1.98298, "decode.loss_dice": 3.58204, "decode.d0.loss_cls": 3.89821, "decode.d0.loss_mask": 1.30271, "decode.d0.loss_dice": 3.33335, "decode.d1.loss_cls": 1.38627, "decode.d1.loss_mask": 1.26255, "decode.d1.loss_dice": 3.2102, "decode.d2.loss_cls": 1.34051, "decode.d2.loss_mask": 1.21937, "decode.d2.loss_dice": 3.21971, "decode.d3.loss_cls": 1.30848, "decode.d3.loss_mask": 1.18896, "decode.d3.loss_dice": 3.24252, "decode.d4.loss_cls": 1.33879, "decode.d4.loss_mask": 1.25495, "decode.d4.loss_dice": 3.23981, "decode.d5.loss_cls": 1.35734, "decode.d5.loss_mask": 1.29319, "decode.d5.loss_dice": 3.35542, "decode.d6.loss_cls": 1.34207, "decode.d6.loss_mask": 1.40669, "decode.d6.loss_dice": 3.38275, "decode.d7.loss_cls": 1.34996, "decode.d7.loss_mask": 1.52517, "decode.d7.loss_dice": 3.39826, "decode.d8.loss_cls": 1.34549, "decode.d8.loss_mask": 1.82859, "decode.d8.loss_dice": 3.5225, "loss": 63.77531, "time": 3.57882}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.0, "memory": 35046, "data_time": 0.02226, "decode.loss_cls": 1.33494, "decode.loss_mask": 1.52083, "decode.loss_dice": 3.38066, "decode.d0.loss_cls": 3.90972, "decode.d0.loss_mask": 1.20268, "decode.d0.loss_dice": 3.224, "decode.d1.loss_cls": 1.30819, "decode.d1.loss_mask": 1.15239, "decode.d1.loss_dice": 3.11564, "decode.d2.loss_cls": 1.33193, "decode.d2.loss_mask": 1.11097, "decode.d2.loss_dice": 3.11676, "decode.d3.loss_cls": 1.28842, "decode.d3.loss_mask": 1.10086, "decode.d3.loss_dice": 3.14488, "decode.d4.loss_cls": 1.32211, "decode.d4.loss_mask": 1.13563, "decode.d4.loss_dice": 3.14599, "decode.d5.loss_cls": 1.32999, "decode.d5.loss_mask": 1.14181, "decode.d5.loss_dice": 3.26198, "decode.d6.loss_cls": 1.31701, "decode.d6.loss_mask": 1.18074, "decode.d6.loss_dice": 3.25719, "decode.d7.loss_cls": 1.32908, "decode.d7.loss_mask": 1.23268, "decode.d7.loss_dice": 3.24609, "decode.d8.loss_cls": 1.32382, "decode.d8.loss_mask": 1.38129, "decode.d8.loss_dice": 3.34154, "loss": 60.18981, "time": 3.57819}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0, "memory": 35046, "data_time": 0.02178, "decode.loss_cls": 1.35876, "decode.loss_mask": 1.30853, "decode.loss_dice": 3.28327, "decode.d0.loss_cls": 3.90031, "decode.d0.loss_mask": 1.25058, "decode.d0.loss_dice": 3.19893, "decode.d1.loss_cls": 1.28742, "decode.d1.loss_mask": 1.2108, "decode.d1.loss_dice": 3.07379, "decode.d2.loss_cls": 1.35991, "decode.d2.loss_mask": 1.19019, "decode.d2.loss_dice": 3.09328, "decode.d3.loss_cls": 1.31662, "decode.d3.loss_mask": 1.18392, "decode.d3.loss_dice": 3.11852, "decode.d4.loss_cls": 1.34303, "decode.d4.loss_mask": 1.21119, "decode.d4.loss_dice": 3.10893, "decode.d5.loss_cls": 1.36438, "decode.d5.loss_mask": 1.18732, "decode.d5.loss_dice": 3.15931, "decode.d6.loss_cls": 1.34667, "decode.d6.loss_mask": 1.2065, "decode.d6.loss_dice": 3.18621, "decode.d7.loss_cls": 1.34839, "decode.d7.loss_mask": 1.22711, "decode.d7.loss_dice": 3.20034, "decode.d8.loss_cls": 1.34283, "decode.d8.loss_mask": 1.26361, "decode.d8.loss_dice": 3.29871, "loss": 59.92934, "time": 3.58077}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.0, "memory": 35046, "data_time": 0.02147, "decode.loss_cls": 1.38005, "decode.loss_mask": 1.25362, "decode.loss_dice": 3.19181, "decode.d0.loss_cls": 3.8989, "decode.d0.loss_mask": 1.24793, "decode.d0.loss_dice": 3.13284, "decode.d1.loss_cls": 1.29347, "decode.d1.loss_mask": 1.22493, "decode.d1.loss_dice": 3.01296, "decode.d2.loss_cls": 1.35852, "decode.d2.loss_mask": 1.18243, "decode.d2.loss_dice": 3.02525, "decode.d3.loss_cls": 1.31712, "decode.d3.loss_mask": 1.18842, "decode.d3.loss_dice": 3.07614, "decode.d4.loss_cls": 1.34079, "decode.d4.loss_mask": 1.22031, "decode.d4.loss_dice": 3.07277, "decode.d5.loss_cls": 1.36093, "decode.d5.loss_mask": 1.22585, "decode.d5.loss_dice": 3.10641, "decode.d6.loss_cls": 1.35479, "decode.d6.loss_mask": 1.21738, "decode.d6.loss_dice": 3.11876, "decode.d7.loss_cls": 1.35855, "decode.d7.loss_mask": 1.21521, "decode.d7.loss_dice": 3.10479, "decode.d8.loss_cls": 1.34873, "decode.d8.loss_mask": 1.22472, "decode.d8.loss_dice": 3.20376, "loss": 59.25815, "time": 3.57751}
{"mode": "train", "epoch": 2, "iter": 170, "lr": 0.0, "memory": 35046, "data_time": 0.235, "decode.loss_cls": 1.36881, "decode.loss_mask": 1.22371, "decode.loss_dice": 3.11224, "decode.d0.loss_cls": 3.89693, "decode.d0.loss_mask": 1.21767, "decode.d0.loss_dice": 3.08552, "decode.d1.loss_cls": 1.26714, "decode.d1.loss_mask": 1.18622, "decode.d1.loss_dice": 2.96529, "decode.d2.loss_cls": 1.29483, "decode.d2.loss_mask": 1.13321, "decode.d2.loss_dice": 2.97405, "decode.d3.loss_cls": 1.27922, "decode.d3.loss_mask": 1.1328, "decode.d3.loss_dice": 3.03344, "decode.d4.loss_cls": 1.31508, "decode.d4.loss_mask": 1.18455, "decode.d4.loss_dice": 3.03448, "decode.d5.loss_cls": 1.3244, "decode.d5.loss_mask": 1.18719, "decode.d5.loss_dice": 3.07012, "decode.d6.loss_cls": 1.33801, "decode.d6.loss_mask": 1.20156, "decode.d6.loss_dice": 3.07508, "decode.d7.loss_cls": 1.3431, "decode.d7.loss_mask": 1.18623, "decode.d7.loss_dice": 3.06709, "decode.d8.loss_cls": 1.32744, "decode.d8.loss_mask": 1.22049, "decode.d8.loss_dice": 3.11809, "loss": 58.16397, "time": 3.7828}
{"mode": "train", "epoch": 2, "iter": 180, "lr": 0.0, "memory": 35046, "data_time": 0.02146, "decode.loss_cls": 1.34533, "decode.loss_mask": 1.16061, "decode.loss_dice": 3.02571, "decode.d0.loss_cls": 3.89973, "decode.d0.loss_mask": 1.18333, "decode.d0.loss_dice": 3.01498, "decode.d1.loss_cls": 1.23703, "decode.d1.loss_mask": 1.13988, "decode.d1.loss_dice": 2.90971, "decode.d2.loss_cls": 1.24491, "decode.d2.loss_mask": 1.11318, "decode.d2.loss_dice": 2.87964, "decode.d3.loss_cls": 1.24148, "decode.d3.loss_mask": 1.11881, "decode.d3.loss_dice": 2.92428, "decode.d4.loss_cls": 1.28353, "decode.d4.loss_mask": 1.14177, "decode.d4.loss_dice": 2.93726, "decode.d5.loss_cls": 1.28521, "decode.d5.loss_mask": 1.11517, "decode.d5.loss_dice": 3.0006, "decode.d6.loss_cls": 1.31726, "decode.d6.loss_mask": 1.14933, "decode.d6.loss_dice": 3.02106, "decode.d7.loss_cls": 1.30558, "decode.d7.loss_mask": 1.13345, "decode.d7.loss_dice": 2.9973, "decode.d8.loss_cls": 1.29968, "decode.d8.loss_mask": 1.14619, "decode.d8.loss_dice": 3.04581, "loss": 56.6178, "time": 3.56904}
{"mode": "train", "epoch": 2, "iter": 190, "lr": 0.0, "memory": 35046, "data_time": 0.02152, "decode.loss_cls": 1.29243, "decode.loss_mask": 1.06777, "decode.loss_dice": 2.90217, "decode.d0.loss_cls": 3.89961, "decode.d0.loss_mask": 1.13458, "decode.d0.loss_dice": 2.92936, "decode.d1.loss_cls": 1.19349, "decode.d1.loss_mask": 1.0656, "decode.d1.loss_dice": 2.82145, "decode.d2.loss_cls": 1.20488, "decode.d2.loss_mask": 1.05628, "decode.d2.loss_dice": 2.77585, "decode.d3.loss_cls": 1.19762, "decode.d3.loss_mask": 1.03531, "decode.d3.loss_dice": 2.81784, "decode.d4.loss_cls": 1.24139, "decode.d4.loss_mask": 1.06236, "decode.d4.loss_dice": 2.80233, "decode.d5.loss_cls": 1.23811, "decode.d5.loss_mask": 1.03714, "decode.d5.loss_dice": 2.83415, "decode.d6.loss_cls": 1.26913, "decode.d6.loss_mask": 1.05129, "decode.d6.loss_dice": 2.88667, "decode.d7.loss_cls": 1.23958, "decode.d7.loss_mask": 1.033, "decode.d7.loss_dice": 2.85776, "decode.d8.loss_cls": 1.24435, "decode.d8.loss_mask": 1.06506, "decode.d8.loss_dice": 2.93499, "loss": 54.19154, "time": 3.57438}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0, "memory": 35046, "data_time": 0.02238, "decode.loss_cls": 1.3164, "decode.loss_mask": 1.2106, "decode.loss_dice": 2.98844, "decode.d0.loss_cls": 3.88411, "decode.d0.loss_mask": 1.19688, "decode.d0.loss_dice": 2.96866, "decode.d1.loss_cls": 1.23509, "decode.d1.loss_mask": 1.17608, "decode.d1.loss_dice": 2.89204, "decode.d2.loss_cls": 1.19273, "decode.d2.loss_mask": 1.175, "decode.d2.loss_dice": 2.89069, "decode.d3.loss_cls": 1.22287, "decode.d3.loss_mask": 1.18317, "decode.d3.loss_dice": 2.90882, "decode.d4.loss_cls": 1.27366, "decode.d4.loss_mask": 1.19559, "decode.d4.loss_dice": 2.87567, "decode.d5.loss_cls": 1.25592, "decode.d5.loss_mask": 1.1889, "decode.d5.loss_dice": 2.89249, "decode.d6.loss_cls": 1.28382, "decode.d6.loss_mask": 1.23199, "decode.d6.loss_dice": 2.9315, "decode.d7.loss_cls": 1.26423, "decode.d7.loss_mask": 1.19678, "decode.d7.loss_dice": 2.92387, "decode.d8.loss_cls": 1.25485, "decode.d8.loss_mask": 1.22116, "decode.d8.loss_dice": 3.02864, "loss": 56.46065, "time": 3.5753}
