{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2,3: NVIDIA L40\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.3.r11.3/compiler.29920130_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.9.0\nMMCV: 1.4.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+94ffa6b", "seed": 786592053, "exp_name": "pizze_training_large.py", "mmseg_version": "0.20.2+94ffa6b", "config": "num_things_classes = 6\nnum_stuff_classes = 0\nnum_classes = 6\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=\n    '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar',\n    backbone=dict(\n        type='BEiTAdapter',\n        patch_size=16,\n        embed_dim=1024,\n        depth=24,\n        num_heads=16,\n        mlp_ratio=4,\n        qkv_bias=True,\n        use_abs_pos_emb=False,\n        use_rel_pos_bias=True,\n        img_size=896,\n        init_values=1e-06,\n        drop_path_rate=0.3,\n        conv_inplane=64,\n        n_points=4,\n        deform_num_heads=16,\n        cffn_ratio=0.25,\n        deform_ratio=0.5,\n        with_cp=True,\n        interaction_indexes=[[0, 5], [6, 11], [12, 17], [18, 23]],\n        pretrained=\n        '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\n    ),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[1024, 1024, 1024, 1024],\n        feat_channels=1024,\n        out_channels=1024,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=6,\n        num_stuff_classes=0,\n        num_queries=200,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=1024,\n                        num_heads=32,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=1024,\n                        feedforward_channels=4096,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=512, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=512, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=1024,\n                    num_heads=32,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=1024,\n                    feedforward_channels=4096,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=4096,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(896, 896),\n            stride=(512, 512))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(896, 896),\n        stride=(512, 512)),\n    init_cfg=None)\ndataset_type = 'PizzeDataset'\ndata_root = 'data/dataset'\nimg_norm_cfg = dict(\n    mean=[71.20378926, 49.96402668, 36.47249101],\n    std=[40.74672974, 30.74751057, 20.52758501],\n    to_rgb=True)\ncrop_size = (896, 896)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(3584, 896), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(896, 896), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[71.20378926, 49.96402668, 36.47249101],\n        std=[40.74672974, 30.74751057, 20.52758501],\n        to_rgb=True),\n    dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(3584, 896),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='ResizeToMultiple', size_divisor=32),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[71.20378926, 49.96402668, 36.47249101],\n                std=[40.74672974, 30.74751057, 20.52758501],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=True),\n            dict(type='Resize', img_scale=(3584, 896), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(896, 896), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[71.20378926, 49.96402668, 36.47249101],\n                std=[40.74672974, 30.74751057, 20.52758501],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n        ]),\n    val=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(3584, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[71.20378926, 49.96402668, 36.47249101],\n                        std=[40.74672974, 30.74751057, 20.52758501],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(3584, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[71.20378926, 49.96402668, 36.47249101],\n                        std=[40.74672974, 30.74751057, 20.52758501],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=10, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='LayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(num_layers=24, layer_decay_rate=0.9))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=10000, max_keep_ckpts=1)\nevaluation = dict(interval=10, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\nwork_dir = './work_dirs/pizze_training_large'\ngpu_ids = range(0, 4)\nauto_resume = False\ndevice = 'cuda'\nseed = 786592053\n", "CLASSES": ["bg", "Anchovy", "Olives", "Salami", "Red_Pepper", "Yellow_Pepper"], "PALETTE": [[255, 255, 255], [0, 0, 255], [0, 255, 255], [0, 255, 0], [255, 255, 0], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0, "memory": 23504, "data_time": 0.02207, "decode.loss_cls": 4.45774, "decode.loss_mask": 2.35925, "decode.loss_dice": 2.81802, "decode.d0.loss_cls": 3.97341, "decode.d0.loss_mask": 2.29391, "decode.d0.loss_dice": 3.47216, "decode.d1.loss_cls": 4.07386, "decode.d1.loss_mask": 2.22578, "decode.d1.loss_dice": 3.18361, "decode.d2.loss_cls": 3.74852, "decode.d2.loss_mask": 2.32043, "decode.d2.loss_dice": 3.03152, "decode.d3.loss_cls": 4.02777, "decode.d3.loss_mask": 2.37159, "decode.d3.loss_dice": 3.09847, "decode.d4.loss_cls": 4.14997, "decode.d4.loss_mask": 2.43137, "decode.d4.loss_dice": 3.00507, "decode.d5.loss_cls": 3.64074, "decode.d5.loss_mask": 2.24794, "decode.d5.loss_dice": 2.97319, "decode.d6.loss_cls": 3.71364, "decode.d6.loss_mask": 2.34223, "decode.d6.loss_dice": 2.95622, "decode.d7.loss_cls": 3.98492, "decode.d7.loss_mask": 2.3412, "decode.d7.loss_dice": 2.89987, "decode.d8.loss_cls": 4.06644, "decode.d8.loss_mask": 2.27495, "decode.d8.loss_dice": 2.79546, "loss": 93.27927, "time": 2.34057}
{"mode": "val", "epoch": 1, "iter": 10, "lr": 0.0, "aAcc": 0.0272, "mIoU": 0.0065, "mAcc": 0.1667, "IoU.bg": 0.0, "IoU.Anchovy": 0.0, "IoU.Olives": 0.0, "IoU.Salami": 0.0, "IoU.Red_Pepper": 0.0, "IoU.Yellow_Pepper": 0.0388, "Acc.bg": 0.0, "Acc.Anchovy": 0.0, "Acc.Olives": 0.0, "Acc.Salami": 0.0, "Acc.Red_Pepper": 0.0, "Acc.Yellow_Pepper": 1.0}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0, "memory": 23504, "data_time": 2.64521, "decode.loss_cls": 4.44325, "decode.loss_mask": 2.47155, "decode.loss_dice": 2.71142, "decode.d0.loss_cls": 3.94544, "decode.d0.loss_mask": 2.47359, "decode.d0.loss_dice": 3.39058, "decode.d1.loss_cls": 3.94547, "decode.d1.loss_mask": 2.36082, "decode.d1.loss_dice": 2.97027, "decode.d2.loss_cls": 3.65344, "decode.d2.loss_mask": 2.44509, "decode.d2.loss_dice": 2.94034, "decode.d3.loss_cls": 3.84817, "decode.d3.loss_mask": 2.423, "decode.d3.loss_dice": 2.88723, "decode.d4.loss_cls": 3.96579, "decode.d4.loss_mask": 2.54938, "decode.d4.loss_dice": 2.83392, "decode.d5.loss_cls": 3.64677, "decode.d5.loss_mask": 2.49018, "decode.d5.loss_dice": 2.80272, "decode.d6.loss_cls": 3.68185, "decode.d6.loss_mask": 2.36589, "decode.d6.loss_dice": 2.79307, "decode.d7.loss_cls": 3.90415, "decode.d7.loss_mask": 2.40538, "decode.d7.loss_dice": 2.73473, "decode.d8.loss_cls": 4.03006, "decode.d8.loss_mask": 2.49922, "decode.d8.loss_dice": 2.71252, "loss": 92.32527, "time": 4.75005}
{"mode": "val", "epoch": 1, "iter": 10, "lr": 0.0, "aAcc": 0.0272, "mIoU": 0.0065, "mAcc": 0.1667, "IoU.bg": 0.0, "IoU.Anchovy": 0.0, "IoU.Olives": 0.0, "IoU.Salami": 0.0, "IoU.Red_Pepper": 0.0, "IoU.Yellow_Pepper": 0.039, "Acc.bg": 0.0, "Acc.Anchovy": 0.0, "Acc.Olives": 0.0, "Acc.Salami": 0.0, "Acc.Red_Pepper": 0.0, "Acc.Yellow_Pepper": 1.0}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.0, "memory": 23504, "data_time": 0.64855, "decode.loss_cls": 3.9245, "decode.loss_mask": 2.06799, "decode.loss_dice": 2.56842, "decode.d0.loss_cls": 3.9606, "decode.d0.loss_mask": 2.02783, "decode.d0.loss_dice": 3.39023, "decode.d1.loss_cls": 3.85507, "decode.d1.loss_mask": 2.06668, "decode.d1.loss_dice": 2.87694, "decode.d2.loss_cls": 3.44289, "decode.d2.loss_mask": 2.0771, "decode.d2.loss_dice": 2.77358, "decode.d3.loss_cls": 3.66287, "decode.d3.loss_mask": 2.10856, "decode.d3.loss_dice": 2.78644, "decode.d4.loss_cls": 3.79231, "decode.d4.loss_mask": 2.13778, "decode.d4.loss_dice": 2.70615, "decode.d5.loss_cls": 3.27686, "decode.d5.loss_mask": 2.08923, "decode.d5.loss_dice": 2.64542, "decode.d6.loss_cls": 3.23374, "decode.d6.loss_mask": 2.0476, "decode.d6.loss_dice": 2.64572, "decode.d7.loss_cls": 3.42595, "decode.d7.loss_mask": 2.10032, "decode.d7.loss_dice": 2.62878, "decode.d8.loss_cls": 3.49928, "decode.d8.loss_mask": 2.13214, "decode.d8.loss_dice": 2.57931, "loss": 84.53028, "time": 2.75604}
{"mode": "val", "epoch": 1, "iter": 10, "lr": 0.0, "aAcc": 0.028, "mIoU": 0.012, "mAcc": 0.1729, "IoU.bg": 0.0002, "IoU.Anchovy": 0.0, "IoU.Olives": 0.032, "IoU.Salami": 0.0, "IoU.Red_Pepper": 0.0, "IoU.Yellow_Pepper": 0.0397, "Acc.bg": 0.0002, "Acc.Anchovy": 0.0, "Acc.Olives": 0.0372, "Acc.Salami": 0.0, "Acc.Red_Pepper": 0.0, "Acc.Yellow_Pepper": 1.0}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.0, "memory": 23504, "data_time": 1.87245, "decode.loss_cls": 3.46412, "decode.loss_mask": 1.83302, "decode.loss_dice": 2.33413, "decode.d0.loss_cls": 3.94161, "decode.d0.loss_mask": 2.21762, "decode.d0.loss_dice": 3.17291, "decode.d1.loss_cls": 3.70334, "decode.d1.loss_mask": 2.13345, "decode.d1.loss_dice": 2.73217, "decode.d2.loss_cls": 3.17639, "decode.d2.loss_mask": 2.03826, "decode.d2.loss_dice": 2.59448, "decode.d3.loss_cls": 3.3164, "decode.d3.loss_mask": 1.94972, "decode.d3.loss_dice": 2.544, "decode.d4.loss_cls": 3.35575, "decode.d4.loss_mask": 1.9461, "decode.d4.loss_dice": 2.51427, "decode.d5.loss_cls": 2.8546, "decode.d5.loss_mask": 1.8851, "decode.d5.loss_dice": 2.44771, "decode.d6.loss_cls": 2.81628, "decode.d6.loss_mask": 1.84786, "decode.d6.loss_dice": 2.37626, "decode.d7.loss_cls": 2.99604, "decode.d7.loss_mask": 1.83767, "decode.d7.loss_dice": 2.32109, "decode.d8.loss_cls": 3.08481, "decode.d8.loss_mask": 1.82763, "decode.d8.loss_dice": 2.30108, "loss": 77.56385, "time": 3.99896}
{"mode": "val", "epoch": 1, "iter": 10, "lr": 0.0, "aAcc": 0.0289, "mIoU": 0.015, "mAcc": 0.1789, "IoU.bg": 0.0004, "IoU.Anchovy": 0.0001, "IoU.Olives": 0.0457, "IoU.Salami": 0.0, "IoU.Red_Pepper": 0.0, "IoU.Yellow_Pepper": 0.0436, "Acc.bg": 0.0004, "Acc.Anchovy": 0.0009, "Acc.Olives": 0.0727, "Acc.Salami": 0.0, "Acc.Red_Pepper": 0.0, "Acc.Yellow_Pepper": 0.9992}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 23504, "data_time": 1.98121, "decode.loss_cls": 2.96353, "decode.loss_mask": 1.95966, "decode.loss_dice": 2.21982, "decode.d0.loss_cls": 3.95395, "decode.d0.loss_mask": 2.32196, "decode.d0.loss_dice": 3.12048, "decode.d1.loss_cls": 3.43533, "decode.d1.loss_mask": 2.06408, "decode.d1.loss_dice": 2.56142, "decode.d2.loss_cls": 2.90164, "decode.d2.loss_mask": 1.98628, "decode.d2.loss_dice": 2.45063, "decode.d3.loss_cls": 3.00018, "decode.d3.loss_mask": 2.03214, "decode.d3.loss_dice": 2.39076, "decode.d4.loss_cls": 2.94632, "decode.d4.loss_mask": 2.01748, "decode.d4.loss_dice": 2.3196, "decode.d5.loss_cls": 2.55252, "decode.d5.loss_mask": 1.97135, "decode.d5.loss_dice": 2.28904, "decode.d6.loss_cls": 2.50574, "decode.d6.loss_mask": 1.9166, "decode.d6.loss_dice": 2.25144, "decode.d7.loss_cls": 2.55604, "decode.d7.loss_mask": 1.86601, "decode.d7.loss_dice": 2.20013, "decode.d8.loss_cls": 2.67287, "decode.d8.loss_mask": 1.8781, "decode.d8.loss_dice": 2.22939, "loss": 73.53449, "time": 4.0942}
{"mode": "val", "epoch": 1, "iter": 10, "lr": 0.0, "aAcc": 0.0588, "mIoU": 0.0305, "mAcc": 0.2353, "IoU.bg": 0.0295, "IoU.Anchovy": 0.0012, "IoU.Olives": 0.079, "IoU.Salami": 0.0, "IoU.Red_Pepper": 0.0001, "IoU.Yellow_Pepper": 0.0728, "Acc.bg": 0.0296, "Acc.Anchovy": 0.0158, "Acc.Olives": 0.4388, "Acc.Salami": 0.0, "Acc.Red_Pepper": 0.0006, "Acc.Yellow_Pepper": 0.9267}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.0, "memory": 23504, "data_time": 1.92405, "decode.loss_cls": 2.40408, "decode.loss_mask": 1.72043, "decode.loss_dice": 2.07214, "decode.d0.loss_cls": 3.95972, "decode.d0.loss_mask": 2.19568, "decode.d0.loss_dice": 2.78281, "decode.d1.loss_cls": 3.24661, "decode.d1.loss_mask": 1.98953, "decode.d1.loss_dice": 2.35733, "decode.d2.loss_cls": 2.63324, "decode.d2.loss_mask": 1.8447, "decode.d2.loss_dice": 2.2048, "decode.d3.loss_cls": 2.62712, "decode.d3.loss_mask": 1.73195, "decode.d3.loss_dice": 2.13535, "decode.d4.loss_cls": 2.53951, "decode.d4.loss_mask": 1.73054, "decode.d4.loss_dice": 2.11983, "decode.d5.loss_cls": 2.19712, "decode.d5.loss_mask": 1.70773, "decode.d5.loss_dice": 2.08822, "decode.d6.loss_cls": 2.07439, "decode.d6.loss_mask": 1.66893, "decode.d6.loss_dice": 2.07248, "decode.d7.loss_cls": 2.09979, "decode.d7.loss_mask": 1.6583, "decode.d7.loss_dice": 2.07369, "decode.d8.loss_cls": 2.14423, "decode.d8.loss_mask": 1.68502, "decode.d8.loss_dice": 2.09401, "loss": 65.85928, "time": 4.04889}
