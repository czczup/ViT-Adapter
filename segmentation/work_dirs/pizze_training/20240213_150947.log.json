{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: NVIDIA L40\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.3.r11.3/compiler.29920130_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.9.0\nMMCV: 1.4.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+94ffa6b", "seed": 559456186, "exp_name": "pizze_training.py", "mmseg_version": "0.20.2+94ffa6b", "config": "num_things_classes = 6\nnum_stuff_classes = 0\nnum_classes = 6\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=\n    '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_base_512_40k_cocostuff10k.pth.tar',\n    backbone=dict(\n        type='BEiTAdapter',\n        patch_size=16,\n        embed_dim=768,\n        depth=12,\n        num_heads=12,\n        mlp_ratio=4,\n        qkv_bias=True,\n        use_abs_pos_emb=False,\n        use_rel_pos_bias=True,\n        img_size=512,\n        init_values=1e-06,\n        drop_path_rate=0.2,\n        conv_inplane=64,\n        n_points=4,\n        deform_num_heads=12,\n        cffn_ratio=0.25,\n        deform_ratio=0.5,\n        interaction_indexes=[[0, 2], [3, 5], [6, 8], [9, 11]],\n        pretrained=\n        '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_base_512_40k_cocostuff10k.pth.tar'\n    ),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[768, 768, 768, 768],\n        feat_channels=256,\n        out_channels=256,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=6,\n        num_stuff_classes=0,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=256,\n                        feedforward_channels=1024,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True)),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=128, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=128, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=256,\n                    num_heads=8,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=256,\n                    feedforward_channels=2048,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True),\n                feedforward_channels=2048,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(512, 512),\n            stride=(341, 341))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(512, 512),\n        stride=(341, 341)),\n    init_cfg=None)\ndataset_type = 'PizzeDataset'\ndata_root = 'data/dataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='ResizeToMultiple', size_divisor=32),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=True),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n        ]),\n    val=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=10, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=3e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='LayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(num_layers=12, layer_decay_rate=0.95))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_base_512_40k_cocostuff10k.pth.tar'\nwork_dir = './work_dirs/pizze_training'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 559456186\n", "CLASSES": ["bg", "Anchovy", "Olives", "Salami", "Red_Pepper", "Yellow_Pepper"], "PALETTE": [[255, 255, 255], [0, 0, 255], [0, 255, 255], [0, 255, 0], [255, 255, 0], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0, "memory": 9602, "data_time": 0.60241, "decode.loss_cls": 2.96656, "decode.loss_mask": 3.3305, "decode.loss_dice": 4.41637, "decode.d0.loss_cls": 4.11466, "decode.d0.loss_mask": 3.07779, "decode.d0.loss_dice": 4.39199, "decode.d1.loss_cls": 4.67665, "decode.d1.loss_mask": 3.33428, "decode.d1.loss_dice": 4.34096, "decode.d2.loss_cls": 3.87321, "decode.d2.loss_mask": 2.91346, "decode.d2.loss_dice": 4.35236, "decode.d3.loss_cls": 3.98428, "decode.d3.loss_mask": 3.87093, "decode.d3.loss_dice": 4.30637, "decode.d4.loss_cls": 4.5816, "decode.d4.loss_mask": 3.97215, "decode.d4.loss_dice": 4.35115, "decode.d5.loss_cls": 4.56156, "decode.d5.loss_mask": 5.21976, "decode.d5.loss_dice": 4.37723, "decode.d6.loss_cls": 4.50679, "decode.d6.loss_mask": 3.51104, "decode.d6.loss_dice": 4.33842, "decode.d7.loss_cls": 2.83843, "decode.d7.loss_mask": 4.35598, "decode.d7.loss_dice": 4.34017, "decode.d8.loss_cls": 3.95835, "decode.d8.loss_mask": 3.71205, "decode.d8.loss_dice": 4.31628, "loss": 120.89134, "time": 0.95639}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0, "memory": 9602, "data_time": 0.0062, "decode.loss_cls": 2.94353, "decode.loss_mask": 3.2564, "decode.loss_dice": 4.40288, "decode.d0.loss_cls": 4.06951, "decode.d0.loss_mask": 3.04334, "decode.d0.loss_dice": 4.37073, "decode.d1.loss_cls": 4.66394, "decode.d1.loss_mask": 3.25631, "decode.d1.loss_dice": 4.32716, "decode.d2.loss_cls": 3.81805, "decode.d2.loss_mask": 2.7895, "decode.d2.loss_dice": 4.34595, "decode.d3.loss_cls": 3.93409, "decode.d3.loss_mask": 3.70626, "decode.d3.loss_dice": 4.30085, "decode.d4.loss_cls": 4.52588, "decode.d4.loss_mask": 3.80242, "decode.d4.loss_dice": 4.3158, "decode.d5.loss_cls": 4.50169, "decode.d5.loss_mask": 4.92806, "decode.d5.loss_dice": 4.35187, "decode.d6.loss_cls": 4.47528, "decode.d6.loss_mask": 3.43657, "decode.d6.loss_dice": 4.36217, "decode.d7.loss_cls": 2.81068, "decode.d7.loss_mask": 4.13517, "decode.d7.loss_dice": 4.3174, "decode.d8.loss_cls": 3.90637, "decode.d8.loss_mask": 3.59719, "decode.d8.loss_dice": 4.333, "loss": 119.02804, "time": 0.33127}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.0, "memory": 9602, "data_time": 0.00619, "decode.loss_cls": 2.85988, "decode.loss_mask": 3.03941, "decode.loss_dice": 4.46557, "decode.d0.loss_cls": 4.04661, "decode.d0.loss_mask": 2.87655, "decode.d0.loss_dice": 4.37764, "decode.d1.loss_cls": 4.62875, "decode.d1.loss_mask": 3.12774, "decode.d1.loss_dice": 4.31274, "decode.d2.loss_cls": 3.72783, "decode.d2.loss_mask": 2.53658, "decode.d2.loss_dice": 4.34203, "decode.d3.loss_cls": 3.84499, "decode.d3.loss_mask": 3.51045, "decode.d3.loss_dice": 4.29021, "decode.d4.loss_cls": 4.42713, "decode.d4.loss_mask": 3.61328, "decode.d4.loss_dice": 4.30993, "decode.d5.loss_cls": 4.36967, "decode.d5.loss_mask": 4.33034, "decode.d5.loss_dice": 4.35103, "decode.d6.loss_cls": 4.34724, "decode.d6.loss_mask": 3.25588, "decode.d6.loss_dice": 4.36564, "decode.d7.loss_cls": 2.76677, "decode.d7.loss_mask": 3.76161, "decode.d7.loss_dice": 4.31865, "decode.d8.loss_cls": 3.82274, "decode.d8.loss_mask": 3.44505, "decode.d8.loss_dice": 4.32946, "loss": 115.80142, "time": 0.33256}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.0, "memory": 9602, "data_time": 0.00603, "decode.loss_cls": 2.73909, "decode.loss_mask": 2.55975, "decode.loss_dice": 4.48371, "decode.d0.loss_cls": 4.00524, "decode.d0.loss_mask": 2.6773, "decode.d0.loss_dice": 4.37868, "decode.d1.loss_cls": 4.62022, "decode.d1.loss_mask": 2.89793, "decode.d1.loss_dice": 4.3183, "decode.d2.loss_cls": 3.65593, "decode.d2.loss_mask": 2.28861, "decode.d2.loss_dice": 4.37513, "decode.d3.loss_cls": 3.66009, "decode.d3.loss_mask": 3.31647, "decode.d3.loss_dice": 4.40708, "decode.d4.loss_cls": 4.22703, "decode.d4.loss_mask": 3.41534, "decode.d4.loss_dice": 4.34272, "decode.d5.loss_cls": 4.1588, "decode.d5.loss_mask": 3.81986, "decode.d5.loss_dice": 4.35612, "decode.d6.loss_cls": 4.17133, "decode.d6.loss_mask": 3.00352, "decode.d6.loss_dice": 4.40942, "decode.d7.loss_cls": 2.61647, "decode.d7.loss_mask": 3.49289, "decode.d7.loss_dice": 4.35277, "decode.d8.loss_cls": 3.61617, "decode.d8.loss_mask": 3.0622, "decode.d8.loss_dice": 4.39823, "loss": 111.82642, "time": 0.3307}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0, "memory": 9602, "data_time": 0.21404, "decode.loss_cls": 2.57842, "decode.loss_mask": 2.01886, "decode.loss_dice": 4.54379, "decode.d0.loss_cls": 3.96024, "decode.d0.loss_mask": 2.33832, "decode.d0.loss_dice": 4.45206, "decode.d1.loss_cls": 4.52216, "decode.d1.loss_mask": 2.48964, "decode.d1.loss_dice": 4.34676, "decode.d2.loss_cls": 3.47222, "decode.d2.loss_mask": 1.88259, "decode.d2.loss_dice": 4.40628, "decode.d3.loss_cls": 3.49103, "decode.d3.loss_mask": 2.8594, "decode.d3.loss_dice": 4.5131, "decode.d4.loss_cls": 3.98995, "decode.d4.loss_mask": 3.04295, "decode.d4.loss_dice": 4.44698, "decode.d5.loss_cls": 3.84459, "decode.d5.loss_mask": 3.422, "decode.d5.loss_dice": 4.34236, "decode.d6.loss_cls": 3.86094, "decode.d6.loss_mask": 2.55402, "decode.d6.loss_dice": 4.50213, "decode.d7.loss_cls": 2.41804, "decode.d7.loss_mask": 3.13808, "decode.d7.loss_dice": 4.45238, "decode.d8.loss_cls": 3.23537, "decode.d8.loss_mask": 2.2686, "decode.d8.loss_dice": 4.49137, "loss": 105.88463, "time": 0.54959}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.0, "memory": 9602, "data_time": 0.00611, "decode.loss_cls": 2.40737, "decode.loss_mask": 1.74611, "decode.loss_dice": 4.48832, "decode.d0.loss_cls": 3.92949, "decode.d0.loss_mask": 2.18423, "decode.d0.loss_dice": 4.29457, "decode.d1.loss_cls": 4.37662, "decode.d1.loss_mask": 2.20416, "decode.d1.loss_dice": 4.24835, "decode.d2.loss_cls": 3.21518, "decode.d2.loss_mask": 1.83919, "decode.d2.loss_dice": 4.30532, "decode.d3.loss_cls": 3.24775, "decode.d3.loss_mask": 2.42014, "decode.d3.loss_dice": 4.40543, "decode.d4.loss_cls": 3.63997, "decode.d4.loss_mask": 2.41617, "decode.d4.loss_dice": 4.39125, "decode.d5.loss_cls": 3.5839, "decode.d5.loss_mask": 3.03727, "decode.d5.loss_dice": 4.30912, "decode.d6.loss_cls": 3.60916, "decode.d6.loss_mask": 2.19217, "decode.d6.loss_dice": 4.38972, "decode.d7.loss_cls": 2.2856, "decode.d7.loss_mask": 2.62903, "decode.d7.loss_dice": 4.42664, "decode.d8.loss_cls": 3.09763, "decode.d8.loss_mask": 1.98995, "decode.d8.loss_dice": 4.44478, "loss": 99.75461, "time": 0.33906}
{"mode": "train", "epoch": 2, "iter": 70, "lr": 0.0, "memory": 9602, "data_time": 0.0062, "decode.loss_cls": 2.25968, "decode.loss_mask": 1.56561, "decode.loss_dice": 4.55625, "decode.d0.loss_cls": 3.90122, "decode.d0.loss_mask": 1.87579, "decode.d0.loss_dice": 4.42356, "decode.d1.loss_cls": 4.18716, "decode.d1.loss_mask": 1.90838, "decode.d1.loss_dice": 4.35437, "decode.d2.loss_cls": 2.93153, "decode.d2.loss_mask": 1.63084, "decode.d2.loss_dice": 4.3993, "decode.d3.loss_cls": 2.9497, "decode.d3.loss_mask": 1.97031, "decode.d3.loss_dice": 4.46506, "decode.d4.loss_cls": 3.32625, "decode.d4.loss_mask": 1.90742, "decode.d4.loss_dice": 4.48998, "decode.d5.loss_cls": 3.31669, "decode.d5.loss_mask": 2.47036, "decode.d5.loss_dice": 4.38879, "decode.d6.loss_cls": 3.30933, "decode.d6.loss_mask": 1.83994, "decode.d6.loss_dice": 4.46773, "decode.d7.loss_cls": 2.10701, "decode.d7.loss_mask": 2.15852, "decode.d7.loss_dice": 4.4254, "decode.d8.loss_cls": 2.93993, "decode.d8.loss_mask": 1.84717, "decode.d8.loss_dice": 4.51028, "loss": 94.88355, "time": 0.33449}
{"mode": "train", "epoch": 2, "iter": 80, "lr": 0.0, "memory": 9602, "data_time": 0.00601, "decode.loss_cls": 2.06369, "decode.loss_mask": 1.5849, "decode.loss_dice": 4.52355, "decode.d0.loss_cls": 3.88497, "decode.d0.loss_mask": 1.83853, "decode.d0.loss_dice": 4.34225, "decode.d1.loss_cls": 3.93928, "decode.d1.loss_mask": 1.90749, "decode.d1.loss_dice": 4.22748, "decode.d2.loss_cls": 2.71039, "decode.d2.loss_mask": 1.67616, "decode.d2.loss_dice": 4.35414, "decode.d3.loss_cls": 2.6948, "decode.d3.loss_mask": 1.84825, "decode.d3.loss_dice": 4.36706, "decode.d4.loss_cls": 3.05054, "decode.d4.loss_mask": 1.76883, "decode.d4.loss_dice": 4.38634, "decode.d5.loss_cls": 3.04864, "decode.d5.loss_mask": 2.09814, "decode.d5.loss_dice": 4.31693, "decode.d6.loss_cls": 3.01441, "decode.d6.loss_mask": 1.75425, "decode.d6.loss_dice": 4.41517, "decode.d7.loss_cls": 2.03119, "decode.d7.loss_mask": 1.89772, "decode.d7.loss_dice": 4.388, "decode.d8.loss_cls": 2.70807, "decode.d8.loss_mask": 1.75993, "decode.d8.loss_dice": 4.46607, "loss": 91.06721, "time": 0.33164}
{"mode": "train", "epoch": 3, "iter": 90, "lr": 0.0, "memory": 9602, "data_time": 0.21371, "decode.loss_cls": 1.9192, "decode.loss_mask": 1.57313, "decode.loss_dice": 4.53052, "decode.d0.loss_cls": 3.87016, "decode.d0.loss_mask": 1.74683, "decode.d0.loss_dice": 4.32854, "decode.d1.loss_cls": 3.66949, "decode.d1.loss_mask": 1.83812, "decode.d1.loss_dice": 4.22692, "decode.d2.loss_cls": 2.42606, "decode.d2.loss_mask": 1.6037, "decode.d2.loss_dice": 4.36207, "decode.d3.loss_cls": 2.40557, "decode.d3.loss_mask": 1.71538, "decode.d3.loss_dice": 4.34218, "decode.d4.loss_cls": 2.689, "decode.d4.loss_mask": 1.64135, "decode.d4.loss_dice": 4.42762, "decode.d5.loss_cls": 2.6781, "decode.d5.loss_mask": 1.86116, "decode.d5.loss_dice": 4.34237, "decode.d6.loss_cls": 2.67217, "decode.d6.loss_mask": 1.6733, "decode.d6.loss_dice": 4.42857, "decode.d7.loss_cls": 1.92091, "decode.d7.loss_mask": 1.76854, "decode.d7.loss_dice": 4.37327, "decode.d8.loss_cls": 2.37689, "decode.d8.loss_mask": 1.68321, "decode.d8.loss_dice": 4.44777, "loss": 87.5421, "time": 0.54274}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0, "memory": 9602, "data_time": 0.00608, "decode.loss_cls": 1.83007, "decode.loss_mask": 1.61329, "decode.loss_dice": 4.49466, "decode.d0.loss_cls": 3.89294, "decode.d0.loss_mask": 1.66105, "decode.d0.loss_dice": 4.34226, "decode.d1.loss_cls": 3.47536, "decode.d1.loss_mask": 1.75228, "decode.d1.loss_dice": 4.27077, "decode.d2.loss_cls": 2.17575, "decode.d2.loss_mask": 1.61207, "decode.d2.loss_dice": 4.32964, "decode.d3.loss_cls": 2.10575, "decode.d3.loss_mask": 1.68562, "decode.d3.loss_dice": 4.338, "decode.d4.loss_cls": 2.35843, "decode.d4.loss_mask": 1.60481, "decode.d4.loss_dice": 4.414, "decode.d5.loss_cls": 2.32458, "decode.d5.loss_mask": 1.76372, "decode.d5.loss_dice": 4.38417, "decode.d6.loss_cls": 2.364, "decode.d6.loss_mask": 1.67912, "decode.d6.loss_dice": 4.41359, "decode.d7.loss_cls": 1.79316, "decode.d7.loss_mask": 1.77949, "decode.d7.loss_dice": 4.33314, "decode.d8.loss_cls": 2.1361, "decode.d8.loss_mask": 1.66983, "decode.d8.loss_dice": 4.43807, "loss": 85.03571, "time": 0.33488}
{"mode": "train", "epoch": 3, "iter": 110, "lr": 0.0, "memory": 9602, "data_time": 0.00613, "decode.loss_cls": 1.78042, "decode.loss_mask": 1.75052, "decode.loss_dice": 4.38053, "decode.d0.loss_cls": 3.87925, "decode.d0.loss_mask": 1.74409, "decode.d0.loss_dice": 4.24495, "decode.d1.loss_cls": 3.18789, "decode.d1.loss_mask": 1.86325, "decode.d1.loss_dice": 4.14801, "decode.d2.loss_cls": 1.99543, "decode.d2.loss_mask": 1.72777, "decode.d2.loss_dice": 4.23645, "decode.d3.loss_cls": 1.91587, "decode.d3.loss_mask": 1.77449, "decode.d3.loss_dice": 4.24612, "decode.d4.loss_cls": 2.09779, "decode.d4.loss_mask": 1.74231, "decode.d4.loss_dice": 4.3406, "decode.d5.loss_cls": 2.06939, "decode.d5.loss_mask": 1.83209, "decode.d5.loss_dice": 4.28622, "decode.d6.loss_cls": 2.12003, "decode.d6.loss_mask": 1.77244, "decode.d6.loss_dice": 4.33376, "decode.d7.loss_cls": 1.7718, "decode.d7.loss_mask": 1.89879, "decode.d7.loss_dice": 4.21205, "decode.d8.loss_cls": 1.96186, "decode.d8.loss_mask": 1.788, "decode.d8.loss_dice": 4.35032, "loss": 83.45247, "time": 0.33345}
{"mode": "train", "epoch": 3, "iter": 120, "lr": 0.0, "memory": 9602, "data_time": 0.00601, "decode.loss_cls": 1.76292, "decode.loss_mask": 1.77946, "decode.loss_dice": 4.28903, "decode.d0.loss_cls": 3.85757, "decode.d0.loss_mask": 1.81766, "decode.d0.loss_dice": 4.20196, "decode.d1.loss_cls": 2.95391, "decode.d1.loss_mask": 1.88227, "decode.d1.loss_dice": 4.12554, "decode.d2.loss_cls": 1.85386, "decode.d2.loss_mask": 1.7133, "decode.d2.loss_dice": 4.21836, "decode.d3.loss_cls": 1.80216, "decode.d3.loss_mask": 1.82366, "decode.d3.loss_dice": 4.19176, "decode.d4.loss_cls": 1.92193, "decode.d4.loss_mask": 1.73584, "decode.d4.loss_dice": 4.27593, "decode.d5.loss_cls": 1.92394, "decode.d5.loss_mask": 1.83281, "decode.d5.loss_dice": 4.2437, "decode.d6.loss_cls": 1.98272, "decode.d6.loss_mask": 1.78906, "decode.d6.loss_dice": 4.28237, "decode.d7.loss_cls": 1.77205, "decode.d7.loss_mask": 1.92177, "decode.d7.loss_dice": 4.16327, "decode.d8.loss_cls": 1.86917, "decode.d8.loss_mask": 1.82824, "decode.d8.loss_dice": 4.26699, "loss": 82.08321, "time": 0.33063}
{"mode": "train", "epoch": 4, "iter": 130, "lr": 0.0, "memory": 9602, "data_time": 0.21503, "decode.loss_cls": 1.73997, "decode.loss_mask": 1.91072, "decode.loss_dice": 4.26074, "decode.d0.loss_cls": 3.87065, "decode.d0.loss_mask": 1.90403, "decode.d0.loss_dice": 4.12407, "decode.d1.loss_cls": 2.74553, "decode.d1.loss_mask": 1.97161, "decode.d1.loss_dice": 4.0532, "decode.d2.loss_cls": 1.79378, "decode.d2.loss_mask": 1.83783, "decode.d2.loss_dice": 4.16511, "decode.d3.loss_cls": 1.74917, "decode.d3.loss_mask": 1.89429, "decode.d3.loss_dice": 4.14049, "decode.d4.loss_cls": 1.80911, "decode.d4.loss_mask": 1.88795, "decode.d4.loss_dice": 4.21174, "decode.d5.loss_cls": 1.81417, "decode.d5.loss_mask": 1.94772, "decode.d5.loss_dice": 4.1943, "decode.d6.loss_cls": 1.88455, "decode.d6.loss_mask": 1.91592, "decode.d6.loss_dice": 4.26081, "decode.d7.loss_cls": 1.78021, "decode.d7.loss_mask": 2.00135, "decode.d7.loss_dice": 4.148, "decode.d8.loss_cls": 1.81824, "decode.d8.loss_mask": 1.91377, "decode.d8.loss_dice": 4.24771, "loss": 81.99674, "time": 0.54541}
{"mode": "train", "epoch": 4, "iter": 140, "lr": 0.0, "memory": 9602, "data_time": 0.00612, "decode.loss_cls": 1.70353, "decode.loss_mask": 1.85031, "decode.loss_dice": 4.21553, "decode.d0.loss_cls": 3.87474, "decode.d0.loss_mask": 1.77022, "decode.d0.loss_dice": 4.19336, "decode.d1.loss_cls": 2.56009, "decode.d1.loss_mask": 1.81995, "decode.d1.loss_dice": 4.1014, "decode.d2.loss_cls": 1.64712, "decode.d2.loss_mask": 1.70276, "decode.d2.loss_dice": 4.16963, "decode.d3.loss_cls": 1.63697, "decode.d3.loss_mask": 1.77633, "decode.d3.loss_dice": 4.14901, "decode.d4.loss_cls": 1.68886, "decode.d4.loss_mask": 1.75706, "decode.d4.loss_dice": 4.20557, "decode.d5.loss_cls": 1.69513, "decode.d5.loss_mask": 1.84596, "decode.d5.loss_dice": 4.19076, "decode.d6.loss_cls": 1.79449, "decode.d6.loss_mask": 1.83044, "decode.d6.loss_dice": 4.22801, "decode.d7.loss_cls": 1.7024, "decode.d7.loss_mask": 1.89982, "decode.d7.loss_dice": 4.1567, "decode.d8.loss_cls": 1.74352, "decode.d8.loss_mask": 1.84435, "decode.d8.loss_dice": 4.23265, "loss": 79.98668, "time": 0.33614}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0, "memory": 9602, "data_time": 0.00626, "decode.loss_cls": 1.70808, "decode.loss_mask": 1.89789, "decode.loss_dice": 4.20045, "decode.d0.loss_cls": 3.86612, "decode.d0.loss_mask": 1.87249, "decode.d0.loss_dice": 4.1319, "decode.d1.loss_cls": 2.37056, "decode.d1.loss_mask": 1.87032, "decode.d1.loss_dice": 4.0555, "decode.d2.loss_cls": 1.65678, "decode.d2.loss_mask": 1.77832, "decode.d2.loss_dice": 4.12246, "decode.d3.loss_cls": 1.63796, "decode.d3.loss_mask": 1.83471, "decode.d3.loss_dice": 4.12382, "decode.d4.loss_cls": 1.68862, "decode.d4.loss_mask": 1.83006, "decode.d4.loss_dice": 4.15907, "decode.d5.loss_cls": 1.69557, "decode.d5.loss_mask": 1.8908, "decode.d5.loss_dice": 4.17113, "decode.d6.loss_cls": 1.7876, "decode.d6.loss_mask": 1.86507, "decode.d6.loss_dice": 4.2188, "decode.d7.loss_cls": 1.73841, "decode.d7.loss_mask": 1.91828, "decode.d7.loss_dice": 4.14022, "decode.d8.loss_cls": 1.7483, "decode.d8.loss_mask": 1.87844, "decode.d8.loss_dice": 4.22174, "loss": 80.07949, "time": 0.33491}
{"mode": "train", "epoch": 4, "iter": 160, "lr": 0.0, "memory": 9602, "data_time": 0.00624, "decode.loss_cls": 1.74353, "decode.loss_mask": 1.92013, "decode.loss_dice": 4.20262, "decode.d0.loss_cls": 3.84652, "decode.d0.loss_mask": 1.88631, "decode.d0.loss_dice": 4.11425, "decode.d1.loss_cls": 2.21514, "decode.d1.loss_mask": 1.89937, "decode.d1.loss_dice": 4.04895, "decode.d2.loss_cls": 1.66577, "decode.d2.loss_mask": 1.8301, "decode.d2.loss_dice": 4.08144, "decode.d3.loss_cls": 1.70264, "decode.d3.loss_mask": 1.86235, "decode.d3.loss_dice": 4.09457, "decode.d4.loss_cls": 1.70467, "decode.d4.loss_mask": 1.85341, "decode.d4.loss_dice": 4.12882, "decode.d5.loss_cls": 1.73154, "decode.d5.loss_mask": 1.91265, "decode.d5.loss_dice": 4.14233, "decode.d6.loss_cls": 1.79323, "decode.d6.loss_mask": 1.90109, "decode.d6.loss_dice": 4.19037, "decode.d7.loss_cls": 1.78126, "decode.d7.loss_mask": 1.94669, "decode.d7.loss_dice": 4.14153, "decode.d8.loss_cls": 1.7745, "decode.d8.loss_mask": 1.90618, "decode.d8.loss_dice": 4.23183, "loss": 80.25379, "time": 0.33255}
{"mode": "train", "epoch": 5, "iter": 170, "lr": 0.0, "memory": 9602, "data_time": 0.21461, "decode.loss_cls": 1.73497, "decode.loss_mask": 1.97767, "decode.loss_dice": 4.11337, "decode.d0.loss_cls": 3.84232, "decode.d0.loss_mask": 1.91871, "decode.d0.loss_dice": 4.05083, "decode.d1.loss_cls": 2.07654, "decode.d1.loss_mask": 1.92743, "decode.d1.loss_dice": 3.97993, "decode.d2.loss_cls": 1.69321, "decode.d2.loss_mask": 1.83578, "decode.d2.loss_dice": 4.04136, "decode.d3.loss_cls": 1.68597, "decode.d3.loss_mask": 1.88015, "decode.d3.loss_dice": 4.0371, "decode.d4.loss_cls": 1.68749, "decode.d4.loss_mask": 1.86936, "decode.d4.loss_dice": 4.07218, "decode.d5.loss_cls": 1.7279, "decode.d5.loss_mask": 1.94808, "decode.d5.loss_dice": 4.09229, "decode.d6.loss_cls": 1.78432, "decode.d6.loss_mask": 1.95137, "decode.d6.loss_dice": 4.1259, "decode.d7.loss_cls": 1.77652, "decode.d7.loss_mask": 1.97878, "decode.d7.loss_dice": 4.09256, "decode.d8.loss_cls": 1.76837, "decode.d8.loss_mask": 1.96241, "decode.d8.loss_dice": 4.13717, "loss": 79.77002, "time": 0.54208}
{"mode": "train", "epoch": 5, "iter": 180, "lr": 0.0, "memory": 9602, "data_time": 0.00644, "decode.loss_cls": 1.67654, "decode.loss_mask": 1.90228, "decode.loss_dice": 4.15532, "decode.d0.loss_cls": 3.87206, "decode.d0.loss_mask": 1.82275, "decode.d0.loss_dice": 4.11831, "decode.d1.loss_cls": 1.97761, "decode.d1.loss_mask": 1.83784, "decode.d1.loss_dice": 4.06993, "decode.d2.loss_cls": 1.60114, "decode.d2.loss_mask": 1.75062, "decode.d2.loss_dice": 4.10225, "decode.d3.loss_cls": 1.59959, "decode.d3.loss_mask": 1.79052, "decode.d3.loss_dice": 4.10653, "decode.d4.loss_cls": 1.63412, "decode.d4.loss_mask": 1.78113, "decode.d4.loss_dice": 4.13993, "decode.d5.loss_cls": 1.64109, "decode.d5.loss_mask": 1.85884, "decode.d5.loss_dice": 4.13828, "decode.d6.loss_cls": 1.71422, "decode.d6.loss_mask": 1.88301, "decode.d6.loss_dice": 4.15144, "decode.d7.loss_cls": 1.67532, "decode.d7.loss_mask": 1.90514, "decode.d7.loss_dice": 4.11151, "decode.d8.loss_cls": 1.69161, "decode.d8.loss_mask": 1.89367, "decode.d8.loss_dice": 4.18322, "loss": 78.78582, "time": 0.33429}
{"mode": "train", "epoch": 5, "iter": 190, "lr": 0.0, "memory": 9602, "data_time": 0.00649, "decode.loss_cls": 1.707, "decode.loss_mask": 1.88307, "decode.loss_dice": 4.20954, "decode.d0.loss_cls": 3.85624, "decode.d0.loss_mask": 1.83378, "decode.d0.loss_dice": 4.10437, "decode.d1.loss_cls": 1.90224, "decode.d1.loss_mask": 1.83433, "decode.d1.loss_dice": 4.05888, "decode.d2.loss_cls": 1.65002, "decode.d2.loss_mask": 1.80317, "decode.d2.loss_dice": 4.07662, "decode.d3.loss_cls": 1.64771, "decode.d3.loss_mask": 1.82901, "decode.d3.loss_dice": 4.09563, "decode.d4.loss_cls": 1.66055, "decode.d4.loss_mask": 1.82712, "decode.d4.loss_dice": 4.12422, "decode.d5.loss_cls": 1.67636, "decode.d5.loss_mask": 1.85518, "decode.d5.loss_dice": 4.18352, "decode.d6.loss_cls": 1.73164, "decode.d6.loss_mask": 1.85932, "decode.d6.loss_dice": 4.21049, "decode.d7.loss_cls": 1.71867, "decode.d7.loss_mask": 1.91279, "decode.d7.loss_dice": 4.18838, "decode.d8.loss_cls": 1.73116, "decode.d8.loss_mask": 1.88811, "decode.d8.loss_dice": 4.21413, "loss": 79.27328, "time": 0.33546}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0, "memory": 9602, "data_time": 0.00621, "decode.loss_cls": 1.69962, "decode.loss_mask": 1.9349, "decode.loss_dice": 4.0232, "decode.d0.loss_cls": 3.86117, "decode.d0.loss_mask": 1.84941, "decode.d0.loss_dice": 4.04845, "decode.d1.loss_cls": 1.77873, "decode.d1.loss_mask": 1.83428, "decode.d1.loss_dice": 3.97349, "decode.d2.loss_cls": 1.59076, "decode.d2.loss_mask": 1.80029, "decode.d2.loss_dice": 3.99937, "decode.d3.loss_cls": 1.57207, "decode.d3.loss_mask": 1.84632, "decode.d3.loss_dice": 3.99508, "decode.d4.loss_cls": 1.61702, "decode.d4.loss_mask": 1.85696, "decode.d4.loss_dice": 3.9942, "decode.d5.loss_cls": 1.65189, "decode.d5.loss_mask": 1.92085, "decode.d5.loss_dice": 4.01798, "decode.d6.loss_cls": 1.70909, "decode.d6.loss_mask": 1.91599, "decode.d6.loss_dice": 4.04907, "decode.d7.loss_cls": 1.68232, "decode.d7.loss_mask": 1.95122, "decode.d7.loss_dice": 3.9821, "decode.d8.loss_cls": 1.71899, "decode.d8.loss_mask": 1.89124, "decode.d8.loss_dice": 4.07784, "loss": 77.84391, "time": 0.33262}
{"mode": "val", "epoch": 5, "iter": 20, "lr": 0.0, "aAcc": 0.0239, "mIoU": 0.004, "mAcc": 0.1667, "IoU.bg": 0.0, "IoU.Anchovy": 0.0, "IoU.Olives": 0.0, "IoU.Salami": 0.0239, "IoU.Red_Pepper": 0.0, "IoU.Yellow_Pepper": 0.0, "Acc.bg": 0.0, "Acc.Anchovy": 0.0, "Acc.Olives": 0.0, "Acc.Salami": 1.0, "Acc.Red_Pepper": 0.0, "Acc.Yellow_Pepper": 0.0}
{"mode": "train", "epoch": 6, "iter": 210, "lr": 0.0, "memory": 9602, "data_time": 1.2387, "decode.loss_cls": 1.71901, "decode.loss_mask": 1.81771, "decode.loss_dice": 4.10375, "decode.d0.loss_cls": 3.83971, "decode.d0.loss_mask": 1.78281, "decode.d0.loss_dice": 4.05616, "decode.d1.loss_cls": 1.73107, "decode.d1.loss_mask": 1.76889, "decode.d1.loss_dice": 3.97986, "decode.d2.loss_cls": 1.66442, "decode.d2.loss_mask": 1.73543, "decode.d2.loss_dice": 3.99553, "decode.d3.loss_cls": 1.60932, "decode.d3.loss_mask": 1.74521, "decode.d3.loss_dice": 4.00961, "decode.d4.loss_cls": 1.64358, "decode.d4.loss_mask": 1.74318, "decode.d4.loss_dice": 4.05092, "decode.d5.loss_cls": 1.67971, "decode.d5.loss_mask": 1.77915, "decode.d5.loss_dice": 4.09789, "decode.d6.loss_cls": 1.72246, "decode.d6.loss_mask": 1.7966, "decode.d6.loss_dice": 4.10604, "decode.d7.loss_cls": 1.72439, "decode.d7.loss_mask": 1.82155, "decode.d7.loss_dice": 4.07324, "decode.d8.loss_cls": 1.74051, "decode.d8.loss_mask": 1.81783, "decode.d8.loss_dice": 4.10823, "loss": 77.46375, "time": 1.57171}
{"mode": "train", "epoch": 6, "iter": 220, "lr": 0.0, "memory": 9602, "data_time": 0.00618, "decode.loss_cls": 1.68937, "decode.loss_mask": 1.85297, "decode.loss_dice": 3.9796, "decode.d0.loss_cls": 3.85366, "decode.d0.loss_mask": 1.78904, "decode.d0.loss_dice": 3.98659, "decode.d1.loss_cls": 1.64847, "decode.d1.loss_mask": 1.77009, "decode.d1.loss_dice": 3.90705, "decode.d2.loss_cls": 1.56351, "decode.d2.loss_mask": 1.72513, "decode.d2.loss_dice": 3.92296, "decode.d3.loss_cls": 1.55815, "decode.d3.loss_mask": 1.77378, "decode.d3.loss_dice": 3.91869, "decode.d4.loss_cls": 1.61353, "decode.d4.loss_mask": 1.75983, "decode.d4.loss_dice": 3.94916, "decode.d5.loss_cls": 1.6254, "decode.d5.loss_mask": 1.82827, "decode.d5.loss_dice": 3.96878, "decode.d6.loss_cls": 1.6864, "decode.d6.loss_mask": 1.81, "decode.d6.loss_dice": 4.01398, "decode.d7.loss_cls": 1.6775, "decode.d7.loss_mask": 1.87083, "decode.d7.loss_dice": 3.92636, "decode.d8.loss_cls": 1.69606, "decode.d8.loss_mask": 1.81975, "decode.d8.loss_dice": 4.01696, "loss": 76.20186, "time": 0.33417}
{"mode": "train", "epoch": 6, "iter": 230, "lr": 0.0, "memory": 9602, "data_time": 0.00593, "decode.loss_cls": 1.67644, "decode.loss_mask": 1.98328, "decode.loss_dice": 4.0116, "decode.d0.loss_cls": 3.8576, "decode.d0.loss_mask": 1.94162, "decode.d0.loss_dice": 3.96398, "decode.d1.loss_cls": 1.66143, "decode.d1.loss_mask": 1.89616, "decode.d1.loss_dice": 3.88726, "decode.d2.loss_cls": 1.59308, "decode.d2.loss_mask": 1.87013, "decode.d2.loss_dice": 3.91115, "decode.d3.loss_cls": 1.58361, "decode.d3.loss_mask": 1.88509, "decode.d3.loss_dice": 3.9377, "decode.d4.loss_cls": 1.6293, "decode.d4.loss_mask": 1.87315, "decode.d4.loss_dice": 3.95258, "decode.d5.loss_cls": 1.64149, "decode.d5.loss_mask": 1.91363, "decode.d5.loss_dice": 4.00517, "decode.d6.loss_cls": 1.69101, "decode.d6.loss_mask": 1.95631, "decode.d6.loss_dice": 4.00481, "decode.d7.loss_cls": 1.67381, "decode.d7.loss_mask": 1.97874, "decode.d7.loss_dice": 3.98118, "decode.d8.loss_cls": 1.69329, "decode.d8.loss_mask": 1.9895, "decode.d8.loss_dice": 4.00921, "loss": 77.65331, "time": 0.333}
{"mode": "train", "epoch": 6, "iter": 240, "lr": 0.0, "memory": 9602, "data_time": 0.00569, "decode.loss_cls": 1.6767, "decode.loss_mask": 1.94277, "decode.loss_dice": 3.99038, "decode.d0.loss_cls": 3.86472, "decode.d0.loss_mask": 1.83704, "decode.d0.loss_dice": 3.9873, "decode.d1.loss_cls": 1.59518, "decode.d1.loss_mask": 1.8112, "decode.d1.loss_dice": 3.88886, "decode.d2.loss_cls": 1.58372, "decode.d2.loss_mask": 1.79182, "decode.d2.loss_dice": 3.92291, "decode.d3.loss_cls": 1.56249, "decode.d3.loss_mask": 1.81429, "decode.d3.loss_dice": 3.94829, "decode.d4.loss_cls": 1.61049, "decode.d4.loss_mask": 1.81854, "decode.d4.loss_dice": 3.95608, "decode.d5.loss_cls": 1.61801, "decode.d5.loss_mask": 1.876, "decode.d5.loss_dice": 3.97219, "decode.d6.loss_cls": 1.67949, "decode.d6.loss_mask": 1.88, "decode.d6.loss_dice": 4.00791, "decode.d7.loss_cls": 1.67002, "decode.d7.loss_mask": 1.93076, "decode.d7.loss_dice": 3.95536, "decode.d8.loss_cls": 1.68926, "decode.d8.loss_mask": 1.90743, "decode.d8.loss_dice": 4.00376, "loss": 76.79296, "time": 0.32587}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.0, "memory": 9602, "data_time": 0.21262, "decode.loss_cls": 1.67019, "decode.loss_mask": 1.86032, "decode.loss_dice": 3.93446, "decode.d0.loss_cls": 3.84641, "decode.d0.loss_mask": 1.7909, "decode.d0.loss_dice": 3.96215, "decode.d1.loss_cls": 1.56835, "decode.d1.loss_mask": 1.77418, "decode.d1.loss_dice": 3.86954, "decode.d2.loss_cls": 1.54399, "decode.d2.loss_mask": 1.73968, "decode.d2.loss_dice": 3.88222, "decode.d3.loss_cls": 1.53869, "decode.d3.loss_mask": 1.76912, "decode.d3.loss_dice": 3.88678, "decode.d4.loss_cls": 1.60613, "decode.d4.loss_mask": 1.75265, "decode.d4.loss_dice": 3.88663, "decode.d5.loss_cls": 1.60614, "decode.d5.loss_mask": 1.79936, "decode.d5.loss_dice": 3.91906, "decode.d6.loss_cls": 1.65184, "decode.d6.loss_mask": 1.82768, "decode.d6.loss_dice": 3.93975, "decode.d7.loss_cls": 1.6578, "decode.d7.loss_mask": 1.88407, "decode.d7.loss_dice": 3.87457, "decode.d8.loss_cls": 1.67629, "decode.d8.loss_mask": 1.84278, "decode.d8.loss_dice": 3.94603, "loss": 75.50778, "time": 0.54052}
