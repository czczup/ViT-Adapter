{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: NVIDIA L40\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.3.r11.3/compiler.29920130_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.9.0\nMMCV: 1.4.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+94ffa6b", "seed": 933594423, "exp_name": "pizze_training.py", "mmseg_version": "0.20.2+94ffa6b", "config": "num_things_classes = 6\nnum_stuff_classes = 0\nnum_classes = 6\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=\n    '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar',\n    backbone=dict(\n        type='BEiTAdapter',\n        patch_size=16,\n        embed_dim=1024,\n        depth=24,\n        num_heads=16,\n        mlp_ratio=4,\n        qkv_bias=True,\n        use_abs_pos_emb=False,\n        use_rel_pos_bias=True,\n        img_size=896,\n        init_values=1e-06,\n        drop_path_rate=0.3,\n        conv_inplane=64,\n        n_points=4,\n        deform_num_heads=16,\n        cffn_ratio=0.25,\n        deform_ratio=0.5,\n        with_cp=True,\n        interaction_indexes=[[0, 5], [6, 11], [12, 17], [18, 23]],\n        pretrained=\n        '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\n    ),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[1024, 1024, 1024, 1024],\n        feat_channels=1024,\n        out_channels=1024,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=6,\n        num_stuff_classes=0,\n        num_queries=200,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=1024,\n                        num_heads=32,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=1024,\n                        feedforward_channels=4096,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=512, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=512, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=1024,\n                    num_heads=32,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=1024,\n                    feedforward_channels=4096,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=4096,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(896, 896),\n            stride=(512, 512))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(896, 896),\n        stride=(512, 512)),\n    init_cfg=None)\ndataset_type = 'PizzeDataset'\ndata_root = 'data/dataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (896, 896)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(3584, 896), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(896, 896), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(3584, 896),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='ResizeToMultiple', size_divisor=32),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=True),\n            dict(type='Resize', img_scale=(3584, 896), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(896, 896), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n        ]),\n    val=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(3584, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(3584, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=1, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=0.002,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='LayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(num_layers=24, layer_decay_rate=0.9))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_large_896_80k_ade20k.pth.tar'\nwork_dir = './work_dirs/pizze_training'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 933594423\n", "CLASSES": ["bg", "Anchovy", "Olives", "Salami", "Red_Pepper", "Yellow_Pepper"], "PALETTE": [[255, 255, 255], [0, 0, 255], [0, 255, 255], [0, 255, 0], [255, 255, 0], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 1, "lr": 0.0, "memory": 16968, "data_time": 5.8887, "decode.loss_cls": 3.74366, "decode.loss_mask": 2.93415, "decode.loss_dice": 2.93529, "decode.d0.loss_cls": 3.66442, "decode.d0.loss_mask": 2.53984, "decode.d0.loss_dice": 3.71903, "decode.d1.loss_cls": 3.75938, "decode.d1.loss_mask": 2.56294, "decode.d1.loss_dice": 3.63199, "decode.d2.loss_cls": 3.87802, "decode.d2.loss_mask": 2.48147, "decode.d2.loss_dice": 3.38036, "decode.d3.loss_cls": 4.28475, "decode.d3.loss_mask": 2.24272, "decode.d3.loss_dice": 3.3764, "decode.d4.loss_cls": 4.57829, "decode.d4.loss_mask": 3.06087, "decode.d4.loss_dice": 3.4676, "decode.d5.loss_cls": 3.53366, "decode.d5.loss_mask": 2.73913, "decode.d5.loss_dice": 3.30417, "decode.d6.loss_cls": 3.68516, "decode.d6.loss_mask": 2.97864, "decode.d6.loss_dice": 3.05563, "decode.d7.loss_cls": 3.51719, "decode.d7.loss_mask": 2.83632, "decode.d7.loss_dice": 2.95287, "decode.d8.loss_cls": 3.41438, "decode.d8.loss_mask": 2.55042, "decode.d8.loss_dice": 2.73848, "loss": 97.54723, "time": 8.33407}
{"mode": "train", "epoch": 1, "iter": 2, "lr": 0.0, "memory": 23503, "data_time": 0.0117, "decode.loss_cls": 4.10172, "decode.loss_mask": 2.29575, "decode.loss_dice": 2.59297, "decode.d0.loss_cls": 3.72851, "decode.d0.loss_mask": 2.47715, "decode.d0.loss_dice": 3.36576, "decode.d1.loss_cls": 3.84619, "decode.d1.loss_mask": 2.56667, "decode.d1.loss_dice": 3.03773, "decode.d2.loss_cls": 3.85775, "decode.d2.loss_mask": 2.16472, "decode.d2.loss_dice": 2.84288, "decode.d3.loss_cls": 4.32459, "decode.d3.loss_mask": 2.37289, "decode.d3.loss_dice": 2.49446, "decode.d4.loss_cls": 4.86501, "decode.d4.loss_mask": 2.21281, "decode.d4.loss_dice": 2.70623, "decode.d5.loss_cls": 3.88234, "decode.d5.loss_mask": 2.2871, "decode.d5.loss_dice": 2.6902, "decode.d6.loss_cls": 4.05923, "decode.d6.loss_mask": 2.23199, "decode.d6.loss_dice": 2.59346, "decode.d7.loss_cls": 3.90878, "decode.d7.loss_mask": 2.2986, "decode.d7.loss_dice": 2.61171, "decode.d8.loss_cls": 3.80487, "decode.d8.loss_mask": 2.37968, "decode.d8.loss_dice": 2.59864, "loss": 91.20041, "time": 2.12054}
{"mode": "train", "epoch": 1, "iter": 3, "lr": 0.0, "memory": 23504, "data_time": 0.01237, "decode.loss_cls": 3.81819, "decode.loss_mask": 2.23371, "decode.loss_dice": 3.01443, "decode.d0.loss_cls": 3.57332, "decode.d0.loss_mask": 2.3678, "decode.d0.loss_dice": 3.72837, "decode.d1.loss_cls": 3.64714, "decode.d1.loss_mask": 2.3183, "decode.d1.loss_dice": 3.23778, "decode.d2.loss_cls": 3.87824, "decode.d2.loss_mask": 2.33817, "decode.d2.loss_dice": 3.25112, "decode.d3.loss_cls": 4.05077, "decode.d3.loss_mask": 2.49401, "decode.d3.loss_dice": 3.31249, "decode.d4.loss_cls": 4.372, "decode.d4.loss_mask": 2.50975, "decode.d4.loss_dice": 3.03847, "decode.d5.loss_cls": 3.32006, "decode.d5.loss_mask": 2.5115, "decode.d5.loss_dice": 3.23597, "decode.d6.loss_cls": 3.63619, "decode.d6.loss_mask": 2.36387, "decode.d6.loss_dice": 2.92689, "decode.d7.loss_cls": 3.61163, "decode.d7.loss_mask": 2.33622, "decode.d7.loss_dice": 2.89485, "decode.d8.loss_cls": 3.47811, "decode.d8.loss_mask": 2.28619, "decode.d8.loss_dice": 3.15201, "loss": 92.93754, "time": 2.09447}
{"mode": "train", "epoch": 1, "iter": 4, "lr": 0.0, "memory": 23504, "data_time": 0.01436, "decode.loss_cls": 3.6552, "decode.loss_mask": 1.822, "decode.loss_dice": 2.41285, "decode.d0.loss_cls": 3.83124, "decode.d0.loss_mask": 1.85797, "decode.d0.loss_dice": 3.45793, "decode.d1.loss_cls": 3.42864, "decode.d1.loss_mask": 2.52608, "decode.d1.loss_dice": 3.08748, "decode.d2.loss_cls": 3.72758, "decode.d2.loss_mask": 1.93235, "decode.d2.loss_dice": 2.86665, "decode.d3.loss_cls": 3.91002, "decode.d3.loss_mask": 2.28931, "decode.d3.loss_dice": 2.93223, "decode.d4.loss_cls": 4.56437, "decode.d4.loss_mask": 2.04162, "decode.d4.loss_dice": 2.78808, "decode.d5.loss_cls": 3.37033, "decode.d5.loss_mask": 1.91327, "decode.d5.loss_dice": 2.67087, "decode.d6.loss_cls": 3.58764, "decode.d6.loss_mask": 1.7794, "decode.d6.loss_dice": 2.5001, "decode.d7.loss_cls": 3.17333, "decode.d7.loss_mask": 1.73312, "decode.d7.loss_dice": 2.42672, "decode.d8.loss_cls": 3.19467, "decode.d8.loss_mask": 1.91441, "decode.d8.loss_dice": 2.45376, "loss": 83.84921, "time": 2.09777}
{"mode": "train", "epoch": 1, "iter": 5, "lr": 0.0, "memory": 23504, "data_time": 0.01582, "decode.loss_cls": 3.12469, "decode.loss_mask": 2.54554, "decode.loss_dice": 2.61222, "decode.d0.loss_cls": 3.70924, "decode.d0.loss_mask": 2.54665, "decode.d0.loss_dice": 3.57969, "decode.d1.loss_cls": 3.50734, "decode.d1.loss_mask": 2.7923, "decode.d1.loss_dice": 2.90704, "decode.d2.loss_cls": 3.75944, "decode.d2.loss_mask": 2.1979, "decode.d2.loss_dice": 2.60869, "decode.d3.loss_cls": 3.6178, "decode.d3.loss_mask": 2.49814, "decode.d3.loss_dice": 2.64515, "decode.d4.loss_cls": 3.69861, "decode.d4.loss_mask": 2.66733, "decode.d4.loss_dice": 2.58499, "decode.d5.loss_cls": 2.69518, "decode.d5.loss_mask": 2.68709, "decode.d5.loss_dice": 2.60095, "decode.d6.loss_cls": 2.98725, "decode.d6.loss_mask": 2.28718, "decode.d6.loss_dice": 2.54665, "decode.d7.loss_cls": 2.80238, "decode.d7.loss_mask": 2.3977, "decode.d7.loss_dice": 2.48574, "decode.d8.loss_cls": 2.8316, "decode.d8.loss_mask": 2.42726, "decode.d8.loss_dice": 2.48251, "loss": 84.83424, "time": 2.10474}
{"mode": "train", "epoch": 1, "iter": 6, "lr": 0.0, "memory": 23504, "data_time": 0.01293, "decode.loss_cls": 2.28941, "decode.loss_mask": 1.96777, "decode.loss_dice": 2.9031, "decode.d0.loss_cls": 3.76657, "decode.d0.loss_mask": 1.94374, "decode.d0.loss_dice": 3.5823, "decode.d1.loss_cls": 3.10594, "decode.d1.loss_mask": 1.77178, "decode.d1.loss_dice": 3.07655, "decode.d2.loss_cls": 2.99842, "decode.d2.loss_mask": 1.96608, "decode.d2.loss_dice": 2.87313, "decode.d3.loss_cls": 3.17039, "decode.d3.loss_mask": 2.1976, "decode.d3.loss_dice": 2.78004, "decode.d4.loss_cls": 3.51073, "decode.d4.loss_mask": 2.0471, "decode.d4.loss_dice": 2.66677, "decode.d5.loss_cls": 2.49422, "decode.d5.loss_mask": 1.86318, "decode.d5.loss_dice": 2.87772, "decode.d6.loss_cls": 2.50338, "decode.d6.loss_mask": 2.10465, "decode.d6.loss_dice": 2.92359, "decode.d7.loss_cls": 2.07958, "decode.d7.loss_mask": 2.12155, "decode.d7.loss_dice": 2.86183, "decode.d8.loss_cls": 1.96142, "decode.d8.loss_mask": 2.31992, "decode.d8.loss_dice": 2.90044, "loss": 77.62892, "time": 2.10906}
{"mode": "train", "epoch": 1, "iter": 7, "lr": 0.0, "memory": 23504, "data_time": 0.01369, "decode.loss_cls": 2.23081, "decode.loss_mask": 1.85569, "decode.loss_dice": 2.11501, "decode.d0.loss_cls": 3.72156, "decode.d0.loss_mask": 2.67373, "decode.d0.loss_dice": 3.13967, "decode.d1.loss_cls": 3.00247, "decode.d1.loss_mask": 2.384, "decode.d1.loss_dice": 2.56131, "decode.d2.loss_cls": 2.91085, "decode.d2.loss_mask": 2.07617, "decode.d2.loss_dice": 2.3481, "decode.d3.loss_cls": 2.70023, "decode.d3.loss_mask": 1.97395, "decode.d3.loss_dice": 2.2985, "decode.d4.loss_cls": 2.99279, "decode.d4.loss_mask": 2.18094, "decode.d4.loss_dice": 2.38651, "decode.d5.loss_cls": 2.05576, "decode.d5.loss_mask": 1.59752, "decode.d5.loss_dice": 2.03151, "decode.d6.loss_cls": 2.31243, "decode.d6.loss_mask": 1.70104, "decode.d6.loss_dice": 2.19578, "decode.d7.loss_cls": 2.11498, "decode.d7.loss_mask": 1.84986, "decode.d7.loss_dice": 2.24309, "decode.d8.loss_cls": 2.00075, "decode.d8.loss_mask": 1.74498, "decode.d8.loss_dice": 2.27167, "loss": 69.67167, "time": 2.10574}
{"mode": "train", "epoch": 1, "iter": 8, "lr": 0.0, "memory": 23504, "data_time": 0.011, "decode.loss_cls": 1.84987, "decode.loss_mask": 1.22774, "decode.loss_dice": 1.56454, "decode.d0.loss_cls": 3.74532, "decode.d0.loss_mask": 2.15668, "decode.d0.loss_dice": 2.66948, "decode.d1.loss_cls": 2.78735, "decode.d1.loss_mask": 2.19832, "decode.d1.loss_dice": 1.96676, "decode.d2.loss_cls": 2.50862, "decode.d2.loss_mask": 1.70525, "decode.d2.loss_dice": 1.91466, "decode.d3.loss_cls": 2.32687, "decode.d3.loss_mask": 1.75612, "decode.d3.loss_dice": 1.66509, "decode.d4.loss_cls": 2.44503, "decode.d4.loss_mask": 1.6729, "decode.d4.loss_dice": 1.83003, "decode.d5.loss_cls": 1.6392, "decode.d5.loss_mask": 1.40973, "decode.d5.loss_dice": 1.44551, "decode.d6.loss_cls": 1.87769, "decode.d6.loss_mask": 1.57399, "decode.d6.loss_dice": 1.59535, "decode.d7.loss_cls": 1.81649, "decode.d7.loss_mask": 1.47507, "decode.d7.loss_dice": 1.5805, "decode.d8.loss_cls": 1.63633, "decode.d8.loss_mask": 1.30417, "decode.d8.loss_dice": 1.59301, "loss": 56.93766, "time": 2.1042}
{"mode": "train", "epoch": 1, "iter": 9, "lr": 0.0, "memory": 23504, "data_time": 0.01033, "decode.loss_cls": 1.40964, "decode.loss_mask": 1.3204, "decode.loss_dice": 2.06478, "decode.d0.loss_cls": 3.62836, "decode.d0.loss_mask": 1.86253, "decode.d0.loss_dice": 2.61341, "decode.d1.loss_cls": 2.42558, "decode.d1.loss_mask": 1.50595, "decode.d1.loss_dice": 2.17033, "decode.d2.loss_cls": 2.34449, "decode.d2.loss_mask": 1.28886, "decode.d2.loss_dice": 2.08104, "decode.d3.loss_cls": 2.22209, "decode.d3.loss_mask": 1.49721, "decode.d3.loss_dice": 2.03003, "decode.d4.loss_cls": 2.24357, "decode.d4.loss_mask": 1.56104, "decode.d4.loss_dice": 2.0295, "decode.d5.loss_cls": 1.5843, "decode.d5.loss_mask": 1.3541, "decode.d5.loss_dice": 2.0603, "decode.d6.loss_cls": 1.5656, "decode.d6.loss_mask": 1.27619, "decode.d6.loss_dice": 2.09449, "decode.d7.loss_cls": 1.34875, "decode.d7.loss_mask": 1.33977, "decode.d7.loss_dice": 2.08825, "decode.d8.loss_cls": 1.31316, "decode.d8.loss_mask": 1.30675, "decode.d8.loss_dice": 2.06959, "loss": 55.70007, "time": 2.10302}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0, "memory": 23504, "data_time": 0.0118, "decode.loss_cls": 1.30169, "decode.loss_mask": 1.85013, "decode.loss_dice": 1.63625, "decode.d0.loss_cls": 3.79751, "decode.d0.loss_mask": 2.1671, "decode.d0.loss_dice": 2.36619, "decode.d1.loss_cls": 2.42129, "decode.d1.loss_mask": 2.11638, "decode.d1.loss_dice": 2.21147, "decode.d2.loss_cls": 1.8548, "decode.d2.loss_mask": 1.92345, "decode.d2.loss_dice": 2.19439, "decode.d3.loss_cls": 1.61797, "decode.d3.loss_mask": 1.65246, "decode.d3.loss_dice": 1.93343, "decode.d4.loss_cls": 1.70942, "decode.d4.loss_mask": 1.62167, "decode.d4.loss_dice": 1.86507, "decode.d5.loss_cls": 1.29476, "decode.d5.loss_mask": 1.66519, "decode.d5.loss_dice": 2.02554, "decode.d6.loss_cls": 1.29067, "decode.d6.loss_mask": 1.61569, "decode.d6.loss_dice": 2.02996, "decode.d7.loss_cls": 1.30735, "decode.d7.loss_mask": 1.79544, "decode.d7.loss_dice": 1.94051, "decode.d8.loss_cls": 1.23643, "decode.d8.loss_mask": 1.92572, "decode.d8.loss_dice": 1.71742, "loss": 56.08537, "time": 2.10242}
