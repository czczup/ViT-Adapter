{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: NVIDIA L40\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.3.r11.3/compiler.29920130_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.9.0\nMMCV: 1.4.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+94ffa6b", "seed": 1667837975, "exp_name": "pizze_training.py", "mmseg_version": "0.20.2+94ffa6b", "config": "num_things_classes = 6\nnum_stuff_classes = 0\nnum_classes = 6\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2Former',\n    pretrained=\n    '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_base_512_40k_cocostuff10k.pth.tar',\n    backbone=dict(\n        type='BEiTAdapter',\n        patch_size=16,\n        embed_dim=768,\n        depth=12,\n        num_heads=12,\n        mlp_ratio=4,\n        qkv_bias=True,\n        use_abs_pos_emb=False,\n        use_rel_pos_bias=True,\n        img_size=512,\n        init_values=1e-06,\n        drop_path_rate=0.2,\n        conv_inplane=64,\n        n_points=4,\n        deform_num_heads=12,\n        cffn_ratio=0.25,\n        deform_ratio=0.5,\n        interaction_indexes=[[0, 2], [3, 5], [6, 8], [9, 11]],\n        pretrained=\n        '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_base_512_40k_cocostuff10k.pth.tar'\n    ),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[768, 768, 768, 768],\n        feat_channels=256,\n        out_channels=256,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=6,\n        num_stuff_classes=0,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=256,\n                        feedforward_channels=1024,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True)),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=128, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=128, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=256,\n                    num_heads=8,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=256,\n                    feedforward_channels=2048,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True),\n                feedforward_channels=2048,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(512, 512),\n            stride=(341, 341))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(512, 512),\n        stride=(341, 341)),\n    init_cfg=None)\ndataset_type = 'PizzeDataset'\ndata_root = 'data/dataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='ResizeToMultiple', size_divisor=32),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=True),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n        ]),\n    val=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PizzeDataset',\n        data_root='data/dataset',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=10, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=3e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='LayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(num_layers=12, layer_decay_rate=0.95))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = '/workspace/ViT-Adapter/segmentation/mask2former_beit_adapter_base_512_40k_cocostuff10k.pth.tar'\nwork_dir = './work_dirs/pizze_training'\ngpu_ids = range(0, 2)\nauto_resume = False\ndevice = 'cuda'\nseed = 1667837975\n", "CLASSES": ["bg", "Anchovy", "Olives", "Salami", "Red_Pepper", "Yellow_Pepper"], "PALETTE": [[255, 255, 255], [0, 0, 255], [0, 255, 255], [0, 255, 0], [255, 255, 0], [255, 0, 0]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0, "memory": 9602, "data_time": 0.61094, "decode.loss_cls": 3.79952, "decode.loss_mask": 4.11122, "decode.loss_dice": 4.40962, "decode.d0.loss_cls": 3.87948, "decode.d0.loss_mask": 2.46045, "decode.d0.loss_dice": 4.40464, "decode.d1.loss_cls": 4.24966, "decode.d1.loss_mask": 3.48042, "decode.d1.loss_dice": 4.41697, "decode.d2.loss_cls": 4.02528, "decode.d2.loss_mask": 3.40882, "decode.d2.loss_dice": 4.4204, "decode.d3.loss_cls": 4.08461, "decode.d3.loss_mask": 3.39544, "decode.d3.loss_dice": 4.41256, "decode.d4.loss_cls": 4.84455, "decode.d4.loss_mask": 3.62264, "decode.d4.loss_dice": 4.42779, "decode.d5.loss_cls": 4.84481, "decode.d5.loss_mask": 3.43657, "decode.d5.loss_dice": 4.43023, "decode.d6.loss_cls": 4.55832, "decode.d6.loss_mask": 3.80543, "decode.d6.loss_dice": 4.42561, "decode.d7.loss_cls": 4.0931, "decode.d7.loss_mask": 4.66078, "decode.d7.loss_dice": 4.4345, "decode.d8.loss_cls": 4.28545, "decode.d8.loss_mask": 3.68579, "decode.d8.loss_dice": 4.40312, "loss": 122.91779, "time": 0.96155}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0, "memory": 9602, "data_time": 0.00633, "decode.loss_cls": 3.79002, "decode.loss_mask": 4.1188, "decode.loss_dice": 4.25062, "decode.d0.loss_cls": 3.86823, "decode.d0.loss_mask": 2.41657, "decode.d0.loss_dice": 4.32489, "decode.d1.loss_cls": 4.16118, "decode.d1.loss_mask": 3.44982, "decode.d1.loss_dice": 4.33342, "decode.d2.loss_cls": 3.97239, "decode.d2.loss_mask": 3.40159, "decode.d2.loss_dice": 4.29437, "decode.d3.loss_cls": 3.99104, "decode.d3.loss_mask": 3.36526, "decode.d3.loss_dice": 4.32107, "decode.d4.loss_cls": 4.73562, "decode.d4.loss_mask": 3.55538, "decode.d4.loss_dice": 4.30701, "decode.d5.loss_cls": 4.72742, "decode.d5.loss_mask": 3.40391, "decode.d5.loss_dice": 4.31529, "decode.d6.loss_cls": 4.44795, "decode.d6.loss_mask": 3.70229, "decode.d6.loss_dice": 4.28395, "decode.d7.loss_cls": 3.99586, "decode.d7.loss_mask": 4.53981, "decode.d7.loss_dice": 4.29979, "decode.d8.loss_cls": 4.24685, "decode.d8.loss_mask": 3.64153, "decode.d8.loss_dice": 4.29077, "loss": 120.55272, "time": 0.33891}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.0, "memory": 9602, "data_time": 0.00614, "decode.loss_cls": 3.63768, "decode.loss_mask": 3.72597, "decode.loss_dice": 4.31134, "decode.d0.loss_cls": 3.84928, "decode.d0.loss_mask": 2.30458, "decode.d0.loss_dice": 4.35443, "decode.d1.loss_cls": 4.16569, "decode.d1.loss_mask": 3.3185, "decode.d1.loss_dice": 4.38771, "decode.d2.loss_cls": 3.92725, "decode.d2.loss_mask": 3.22497, "decode.d2.loss_dice": 4.33808, "decode.d3.loss_cls": 3.95014, "decode.d3.loss_mask": 3.2064, "decode.d3.loss_dice": 4.35333, "decode.d4.loss_cls": 4.63785, "decode.d4.loss_mask": 3.42796, "decode.d4.loss_dice": 4.31663, "decode.d5.loss_cls": 4.55274, "decode.d5.loss_mask": 3.26238, "decode.d5.loss_dice": 4.36588, "decode.d6.loss_cls": 4.31613, "decode.d6.loss_mask": 3.49658, "decode.d6.loss_dice": 4.35215, "decode.d7.loss_cls": 3.84219, "decode.d7.loss_mask": 4.13056, "decode.d7.loss_dice": 4.33963, "decode.d8.loss_cls": 4.07371, "decode.d8.loss_mask": 3.44923, "decode.d8.loss_dice": 4.33415, "loss": 117.95314, "time": 0.33603}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.0, "memory": 9602, "data_time": 0.00582, "decode.loss_cls": 3.4741, "decode.loss_mask": 3.45351, "decode.loss_dice": 4.37328, "decode.d0.loss_cls": 3.79621, "decode.d0.loss_mask": 2.0583, "decode.d0.loss_dice": 4.39632, "decode.d1.loss_cls": 4.1298, "decode.d1.loss_mask": 3.16336, "decode.d1.loss_dice": 4.50344, "decode.d2.loss_cls": 3.77666, "decode.d2.loss_mask": 2.99086, "decode.d2.loss_dice": 4.43492, "decode.d3.loss_cls": 3.80921, "decode.d3.loss_mask": 2.88649, "decode.d3.loss_dice": 4.46682, "decode.d4.loss_cls": 4.45297, "decode.d4.loss_mask": 3.22421, "decode.d4.loss_dice": 4.35239, "decode.d5.loss_cls": 4.25255, "decode.d5.loss_mask": 3.01394, "decode.d5.loss_dice": 4.44437, "decode.d6.loss_cls": 4.04968, "decode.d6.loss_mask": 3.27114, "decode.d6.loss_dice": 4.4741, "decode.d7.loss_cls": 3.57103, "decode.d7.loss_mask": 3.74458, "decode.d7.loss_dice": 4.36519, "decode.d8.loss_cls": 3.87176, "decode.d8.loss_mask": 3.13595, "decode.d8.loss_dice": 4.42781, "loss": 114.36495, "time": 0.33275}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0, "memory": 9602, "data_time": 0.21321, "decode.loss_cls": 3.28581, "decode.loss_mask": 2.94614, "decode.loss_dice": 4.55615, "decode.d0.loss_cls": 3.80998, "decode.d0.loss_mask": 1.82168, "decode.d0.loss_dice": 4.48808, "decode.d1.loss_cls": 4.06855, "decode.d1.loss_mask": 2.80492, "decode.d1.loss_dice": 4.62358, "decode.d2.loss_cls": 3.68085, "decode.d2.loss_mask": 2.48368, "decode.d2.loss_dice": 4.58425, "decode.d3.loss_cls": 3.64806, "decode.d3.loss_mask": 2.35949, "decode.d3.loss_dice": 4.5762, "decode.d4.loss_cls": 4.22778, "decode.d4.loss_mask": 2.73054, "decode.d4.loss_dice": 4.45623, "decode.d5.loss_cls": 4.04793, "decode.d5.loss_mask": 2.45203, "decode.d5.loss_dice": 4.5881, "decode.d6.loss_cls": 3.78357, "decode.d6.loss_mask": 2.69868, "decode.d6.loss_dice": 4.63384, "decode.d7.loss_cls": 3.26551, "decode.d7.loss_mask": 3.33221, "decode.d7.loss_dice": 4.4663, "decode.d8.loss_cls": 3.58074, "decode.d8.loss_mask": 2.64845, "decode.d8.loss_dice": 4.4892, "loss": 109.13853, "time": 0.54499}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.0, "memory": 9602, "data_time": 0.00625, "decode.loss_cls": 3.03007, "decode.loss_mask": 2.41789, "decode.loss_dice": 4.43111, "decode.d0.loss_cls": 3.76262, "decode.d0.loss_mask": 1.89887, "decode.d0.loss_dice": 4.30146, "decode.d1.loss_cls": 3.98584, "decode.d1.loss_mask": 2.52196, "decode.d1.loss_dice": 4.46268, "decode.d2.loss_cls": 3.6012, "decode.d2.loss_mask": 2.14556, "decode.d2.loss_dice": 4.402, "decode.d3.loss_cls": 3.48023, "decode.d3.loss_mask": 2.02413, "decode.d3.loss_dice": 4.42761, "decode.d4.loss_cls": 4.00922, "decode.d4.loss_mask": 2.29483, "decode.d4.loss_dice": 4.30578, "decode.d5.loss_cls": 3.79119, "decode.d5.loss_mask": 1.97845, "decode.d5.loss_dice": 4.48628, "decode.d6.loss_cls": 3.48869, "decode.d6.loss_mask": 2.22157, "decode.d6.loss_dice": 4.4913, "decode.d7.loss_cls": 3.003, "decode.d7.loss_mask": 2.98709, "decode.d7.loss_dice": 4.3398, "decode.d8.loss_cls": 3.31661, "decode.d8.loss_mask": 2.20178, "decode.d8.loss_dice": 4.37343, "loss": 102.18222, "time": 0.33871}
{"mode": "train", "epoch": 2, "iter": 70, "lr": 0.0, "memory": 9602, "data_time": 0.00614, "decode.loss_cls": 2.83494, "decode.loss_mask": 1.98157, "decode.loss_dice": 4.46776, "decode.d0.loss_cls": 3.69782, "decode.d0.loss_mask": 1.81699, "decode.d0.loss_dice": 4.33988, "decode.d1.loss_cls": 3.87041, "decode.d1.loss_mask": 2.29776, "decode.d1.loss_dice": 4.39052, "decode.d2.loss_cls": 3.32266, "decode.d2.loss_mask": 1.91613, "decode.d2.loss_dice": 4.38443, "decode.d3.loss_cls": 3.18693, "decode.d3.loss_mask": 1.81742, "decode.d3.loss_dice": 4.38245, "decode.d4.loss_cls": 3.71483, "decode.d4.loss_mask": 1.98707, "decode.d4.loss_dice": 4.30974, "decode.d5.loss_cls": 3.35508, "decode.d5.loss_mask": 1.72611, "decode.d5.loss_dice": 4.46642, "decode.d6.loss_cls": 3.16179, "decode.d6.loss_mask": 1.80687, "decode.d6.loss_dice": 4.55885, "decode.d7.loss_cls": 2.64302, "decode.d7.loss_mask": 2.54958, "decode.d7.loss_dice": 4.38036, "decode.d8.loss_cls": 2.94843, "decode.d8.loss_mask": 1.88132, "decode.d8.loss_dice": 4.39951, "loss": 96.59666, "time": 0.33747}
